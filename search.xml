<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Dell工作站CentOS-7装机</title>
    <url>/2020/06/07/installation/</url>
    <content><![CDATA[<h1 id="工作站CentOS7装机"><a href="#工作站CentOS7装机" class="headerlink" title="工作站CentOS7装机"></a>工作站CentOS7装机</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本次装机的工作站型号为<strong>Dell Precision T3630</strong>，搭载有<strong>Intel(R)Xoen@E2286G</strong>处理器（6核心/12线程，4.00GHz），512G固态硬盘、1T机械硬盘以及<strong>RTX2080Ti</strong>显卡一张（单涡轮）。文章将分为以下几部分介绍：</p>
<a id="more"></a>
<ol>
<li><strong>CentOS7</strong>系统安装；</li>
<li>显卡驱动、<strong>CUDA Toolkit</strong>以及<strong>cuDNN</strong>安装；</li>
<li>深度学习环境配置，诸如常用的框架 <strong>Tensorflow</strong>、<strong>Keras</strong>等；</li>
</ol>
<p><em>本章节主要介绍第一部分内容，其它内容将在其它日志中更新，欢迎关注。需要注意的是除系统iso文件外，其他所有安装包作者均在安装完的系统内部下载的（主机插了网线，下载速度比较快，卧室离路由器太远收不到5GHz的信号，2.5GHz下载实在是太慢了），如果没有有线网络的小伙伴可以考虑将手机接到主机上联网下载，而且这台工作站支持Type-c接口哦。</em></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><em>准备工作</em>：一个6G及以上内存的U盘（用于镜像文件的制作，CentOS7安装文件大小为4.8G），一个U盘启动制作工具以及CentOS-7-x86_64-xxx.iso镜像文件一个。<br>U盘制作工具使用<a href="https://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">UltraISO</a>，镜像文件使用国内的<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">阿里云源</a>下载，作者安装的是DVD版本（<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2003.iso" target="_blank" rel="noopener">CentOS-7-x86_64-DVD-2003.iso</a>），文件大小为4.5G，此安装包内能够满足一般用户的需求，并且在安装过程中可以根据实际需要对packages进行选择。选择此版本的原因是保持与实验室工作站环境的一致性，尽量减少代码移植过程中出现的问题（但人工智能的代码的可移植性是比较差的，其主要与<em>Tensorflow</em>、<em>Keras</em>等框架的版本相关）。</p>
<h2 id="CentOS7-64bit系统安装"><a href="#CentOS7-64bit系统安装" class="headerlink" title="CentOS7-64bit系统安装"></a>CentOS7-64bit系统安装</h2><h3 id="U盘启动制作"><a href="#U盘启动制作" class="headerlink" title="U盘启动制作"></a>U盘启动制作</h3><ol>
<li>下载并安装UltraISO（<a href="https://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">下载地址</a>）；</li>
<li>下载CentosOS-7镜像文件（<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">下载地址</a>），选择DVD版本（<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2003.iso" target="_blank" rel="noopener">CentOS-7-x86_64-DVD-2003.iso</a>）；</li>
<li>备用电脑中插入U盘（制作启动U盘需要将其格式化，所以先要备份好U盘中的原始数据）；</li>
<li>打开UltraISO程序—<strong>继续试用</strong>；<br><img src="/2020/06/07/installation/ultraiso_enter.png" alt="UltraISO"></li>
<li>单击左上角<strong>文件</strong>—<strong>打开</strong>；<br><img src="/2020/06/07/installation/ultraiso_open.png" alt="UltraISOstart"></li>
<li>选择下载好的iso文件；<br><img src="/2020/06/07/installation/ultraiso_select.png" alt="SelectISO"></li>
<li><strong>启动</strong>—<strong>写入硬盘映像</strong><br><img src="/2020/06/07/installation/ultraiso_start.png" alt="WriteSelect"></li>
<li>在<strong>硬盘驱动器</strong>一栏选择自己的U盘，其他设置保持默认，然后单击<strong>写入</strong>开始U盘启动制作过程；<br><img src="/2020/06/07/installation/ultraiso_write.png" alt="WriteToUdisk"></li>
<li>写入完成后我们可以看到U盘盘符的名字有些奇怪(UltraISO软件问题，使用其他U盘启动制作工具可能会解决该问题)，如果直接用它安装系统会出现错误，这时我们要修改U盘的盘符(U盘处右键—属性)为引号内的内容“ <strong>CENTOS7</strong> ”（必须为大写）；<br><img src="/2020/06/07/installation/u_modify.png" alt="ModifyU"></li>
<li>然后进入<em>U盘/EFI/BOOT</em>，在目录中找到grub.cfg文件并打开，将其中所有的 <strong>CentOS\x207\x20x86_64</strong> 替换为 <strong>CENTOS7</strong>（与U盘盘符保持一致），这样启动盘就制作完成了。<br><img src="/2020/06/07/installation/grub.png" alt="Grub"></li>
</ol>
<h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><p> 作者使用的主机没有预装其它系统，准备只安装 <strong>CentOS7</strong> 用于科研。</p>
<ol>
<li>启动主机，在显示器显示 <strong><em>DELL</em></strong> 商标时 按下 <strong>F2</strong> 进入 <strong>BIOS</strong> 设置界面；<br><img src="/2020/06/07/installation/f2.jpg" alt="F2"></li>
<li>在 <strong>Settings—General—Boot Squence</strong> 右侧选择 <strong>UEFI</strong> 模式并点击下方的 <strong>Apply</strong> 按钮；<br><img src="/2020/06/07/installation/uefi.jpg" alt="BOOT"></li>
<li>在 <strong>Settings—System Configuration—SATA Operation</strong> 右侧选择 <strong>AHCI</strong> （默认为 <strong>RAID ON</strong>）使硬盘处于可发现模式，点击下方的 <strong>Apply</strong> 按钮；<br><img src="/2020/06/07/installation/ahci.jpg" alt="AHCI"></li>
<li>按下 <strong>Esc</strong> 保存设置，重启主机并在 <strong><em>DELL</em></strong> 商标界面按下 <strong>F12</strong>进入启动盘选择界面 ，确认 <strong>Boot mode</strong> 是否为 <strong>UEFI</strong> 以及 <strong>Secure Boot</strong> 是否为 <strong>off</strong> 状态，若状态有误则返回 <strong>BIOS</strong> 重新设置；<br><img src="/2020/06/07/installation/f10.jpg" alt="SELECTU"></li>
<li>若没有错误，选择 *<em>UEFI BOOT: *</em>下方的U盘并按回车、进入；</li>
<li>在安装界面选择 <strong>Install CentOS7</strong>；<br><img src="/2020/06/07/installation/install_centos7.jpg" alt="CENTOS7"></li>
<li><strong>SOFTWARE SELECTION</strong> 选择 <strong>GNOME Desktop</strong>，右侧可自定义需要安装的软件包以及环境；<br><img src="/2020/06/07/installation/selection.jpg" alt="SOFTWAVESELECTION"></li>
<li><strong>INSTALLATION DESTINATION</strong>  选择512G的固态硬盘并选择自动分区（在硬盘选择界面下方 <strong>Other Storage Options—Partitioning</strong> 处选择 <strong>Automatically configure partitioning</strong> ）</li>
<li><strong>Begin Installation</strong>；</li>
<li>系统安装过程中需要完成用户信息的设置，等待完成后 <strong>Reboot</strong>进入系统。</li>
</ol>
<h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><p>在 <strong>CentOS</strong> 使用过程中，我们经常需要从网络上下载各种安装包， <strong>yum(CentOS)</strong> 或 <strong>apt-get(Ubuntu)</strong> 是比较常用的方式，但是系统自带的安装源服务器都在国外，下载速度非常慢，因此我们需要使用国内的诸如清华源、豆瓣源、阿里源等加速下载，下面介绍一些简单的下载加速技巧。<br>（以下操作均需要在 <strong>root</strong> 权限下运行）首先，查看系统是否安装有 <strong>wget</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget --version</span><br></pre></td></tr></table></figure>
<p>如果未安装的话首先使用 <strong>yum</strong> 进行安装（）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ yum -y install wget</span><br><span class="line"><span class="comment"># -y 表示安装的自动选择</span></span><br></pre></td></tr></table></figure>
<p>再次查询即可看到 <strong>wget</strong> 的安装位置、版本等信息。<br>然后备份系统原有的 <strong>yum</strong> 下载源并下载阿里源、生成缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root] cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line">[root] wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo <span class="comment">#阿里云安装，也可以安装网易等源</span></span><br><span class="line">[root] yum makecache <span class="comment">#生成缓存</span></span><br></pre></td></tr></table></figure>

<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root] wget https://tuxera.com/opensource/ntfs-3g_ntfsprogs-2017.3.23.tgz</span><br><span class="line">[root] tar zxvf ntfs-3g_ntfsprogs-2017.3.23.tgz</span><br><span class="line">[root] ./configure</span><br><span class="line">[root] make</span><br><span class="line">[root] make install</span><br><span class="line">[root] mount -t ntfs-3g /deb/sda2 /mnt/data/</span><br></pre></td></tr></table></figure>

<p>这时就可以畅快地使用 <code>yum -y install</code>畅快地下载各种安装包啦。</p>
]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>CentOS系统安装</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下Anaconda及Tensorflow安装</title>
    <url>/2020/06/11/install_atk/</url>
    <content><![CDATA[<h1 id="CentOS7下深度学习环境配置（Anaconda-Tensorflow-Keras）"><a href="#CentOS7下深度学习环境配置（Anaconda-Tensorflow-Keras）" class="headerlink" title="CentOS7下深度学习环境配置（Anaconda+Tensorflow+Keras）"></a>CentOS7下深度学习环境配置（Anaconda+Tensorflow+Keras）</h1><h2 id="硬件信息查询"><a href="#硬件信息查询" class="headerlink" title="硬件信息查询"></a>硬件信息查询</h2><p>笔者的CPU和GPU型号分别如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /proc/cpuinfo |grep name|cut -f2 -d:|uniq -c <span class="comment">#查看CPU型号</span></span><br><span class="line"> 12  Intel(R) Xeon(R) E-2286G CPU @ 4.00GHz</span><br><span class="line">$ lspci | grep -i nvidia 查看连接的GPU设备</span><br><span class="line">01:00.0 VGA compatible controller: NVIDIA Corporation TU102 [GeForce RTX 2080 Ti Rev. A] (rev a1)</span><br><span class="line">01:00.1 Audio device: NVIDIA Corporation TU102 High Definition Audio Controller (rev a1)</span><br><span class="line">01:00.2 USB controller: NVIDIA Corporation TU102 USB 3.1 Host Controller (rev a1)</span><br><span class="line">01:00.3 Serial bus controller [0c80]: NVIDIA Corporation TU102 USB Type-C UCSI Controller (rev a1)</span><br><span class="line"><span class="comment">#如果CUDA和驱动已经安装完成并且～/.bashrc也配置完成则可以通过 nvidia-smi 查询驱动及GPU信息。</span></span><br><span class="line">$ nvidia-smi <span class="comment">#输出GPU运行状态及驱动版本</span></span><br><span class="line">Tue Jun  9 11:30:14 2020       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 440.82       Driver Version: 440.82       CUDA Version: 10.2     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce RTX 208...  Off  | 00000000:01:00.0  On |                  N/A |</span><br><span class="line">| 66%   84C    P2   233W / 250W |  10969MiB / 11016MiB |     91%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br></pre></td></tr></table></figure>
<p>另外，对于 <strong>CUDA</strong> 和 <strong>cuDNN</strong> 版本的查询可通过以下方式进行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvcc --version <span class="comment">#查询cuda版本</span></span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2018 NVIDIA Corporation</span><br><span class="line">Built on Sat_Aug_25_21:08:01_CDT_2018</span><br><span class="line">Cuda compilation tools, release 10.0, V10.0.130</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">$ cat /usr/<span class="built_in">local</span>/cuda/version.txt</span><br><span class="line">CUDA Version 10.0.130</span><br><span class="line">$ cat /usr/<span class="built_in">local</span>/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 <span class="comment">#查询cudnn版本</span></span><br><span class="line"><span class="comment">#define CUDNN_MAJOR 7</span></span><br><span class="line"><span class="comment">#define CUDNN_MINOR 6</span></span><br><span class="line"><span class="comment">#define CUDNN_PATCHLEVEL 5</span></span><br><span class="line">--</span><br><span class="line"><span class="comment">#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)</span></span><br><span class="line"><span class="comment">#include "driver_types.h"</span></span><br></pre></td></tr></table></figure>

<h2 id="Anaconda-安装"><a href="#Anaconda-安装" class="headerlink" title="Anaconda 安装"></a>Anaconda 安装</h2><p>64位Linux的 <strong>Anacoda</strong> 安装包可以到<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">清华源</a>上下载，笔者下载安装的是5.3.1版本（<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Linux-x86_64.sh" target="_blank" rel="noopener">下载地址</a>），文件格式为 <strong>.sh</strong>，安装包下载完成后，我们进入到下载目录中，打开 <strong>terminal</strong> 并输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash Anaconda3-5.3.1-Linux-x86_64.sh -u <span class="comment"># -u可自定义安装目录</span></span><br><span class="line"><span class="comment">#进入安装后敲回车,直到出现界面并输入yes继续安装或者no退出安装:</span></span><br><span class="line">$ Please answer <span class="string">'yes'</span> or <span class="string">'no'</span>:<span class="string">'</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; yes</span></span><br><span class="line"><span class="string">Anaconda3 will now be installed into this location:</span></span><br><span class="line"><span class="string">/当前将要安装的目录</span></span><br><span class="line"><span class="string">  - Press ENTER to confirm the location</span></span><br><span class="line"><span class="string">  - Press CTRL-C to abort the installation</span></span><br><span class="line"><span class="string">  - Or specify a different location below</span></span><br><span class="line"><span class="string">[/home/wangsw/anaconda3] &gt;&gt;&gt; /此处输入你需要安装的目录</span></span><br><span class="line"><span class="string">#部分目录需要其它用户或者root权限，确认之后之后将会完成安装，最后会提示是否需要将Anaconda路径写入环境变量（推荐自动写入）以及是否需要使用VSCode（根据个人需要）：</span></span><br><span class="line"><span class="string">$ Do you wish the installer to initialize Anaconda3</span></span><br><span class="line"><span class="string">in your /root/.bashrc ? [yes|no]</span></span><br><span class="line"><span class="string">[no] &gt;&gt;&gt; no</span></span><br><span class="line"><span class="string">$ Do you wish to proceed with the installation of Microsoft VSCode? [yes|no]</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; no</span></span><br><span class="line"><span class="string">#此时安装已经完成。</span></span><br></pre></td></tr></table></figure>

<h2 id="conda-环境创建"><a href="#conda-环境创建" class="headerlink" title="conda 环境创建"></a>conda 环境创建</h2><p>然后我们开始配置 <strong>conda</strong> 环境，不同 <strong>conda</strong> 环境可以安装不同 <strong>python</strong> 版本以及 <strong>tensorflow</strong> 等版本，其相当于一个容器，可用于不同需求的生产环境。为了加速 <strong>conda</strong> 环境配置过程，与安装完系统后进行相同的操作：更新下载源（可使用清华源、中科大源等）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda config --show <span class="comment">#输入后找到 channels 属性可查看已有下载源，若没有镜像源则执行以下命令</span></span><br><span class="line">$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">$ conda config --<span class="built_in">set</span> show_channel_urls yes <span class="comment">#该命令可允许下载时显示源地址</span></span><br><span class="line">$ conda clean -i <span class="comment">#清除索引缓存，保证用的是镜像站提供的索引。</span></span><br><span class="line">$ conda config --show <span class="comment">#查看是否源地址是否更新完成</span></span><br></pre></td></tr></table></figure>
<p>更新完源之后我们建立深度学习环境，首先创建一个特定 <strong>python</strong> 版本的 <strong>conda</strong> 环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda create -n env_name python=3.x <span class="comment">#env_name处输入自己想要建立的环境名称，x处填写需要的python版本，笔者为了保证原有代码的可移植性，使用python3.6版本</span></span><br><span class="line">  Solving environment: \ <span class="comment">#环境配置中，耐心等待即可</span></span><br><span class="line">  <span class="comment">## Package Plan ##</span></span><br><span class="line">  environment location: /xxxxxx/Anaconda/envs/env_name</span><br><span class="line">  added / updated specs: </span><br><span class="line">    - python=3.6</span><br><span class="line"> </span><br><span class="line">The following packages will be downloaded:</span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    certifi-2020.4.5.2         |   py36h9f0ad1d_0         152 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ld_impl_linux-64-2.34      |       h53a641e_5         616 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ca-certificates-2020.4.5.2 |       hecda079_0         147 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:         914 KB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">    _libgcc_mutex:    0.1-conda_forge              https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    _openmp_mutex:    4.5-0_gnu                    https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ca-certificates:  2020.4.5.2-hecda079_0        https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    certifi:          2020.4.5.2-py36h9f0ad1d_0    https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ld_impl_linux-64: 2.34-h53a641e_5              https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    libffi:           3.2.1-he1b5a44_1007          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    libgcc-ng:        9.2.0-h24d8f2e_2             https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    libgomp:          9.2.0-h24d8f2e_2             https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    libstdcxx-ng:     9.2.0-hdf63c60_2             https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ncurses:          6.1-hf484d3e_1002            https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    openssl:          1.1.1g-h516909a_0            https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    pip:              20.1.1-py_1                  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    python:           3.6.10-h8356626_1011_cpython https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    python_abi:       3.6-1_cp36m                  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    readline:         8.0-hf8c457e_0               https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    setuptools:       47.1.1-py36h9f0ad1d_0        https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    sqlite:           3.30.1-hcee41ef_0            https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    tk:               8.6.10-hed695b0_0            https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    wheel:            0.34.2-py_1                  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    xz:               5.2.5-h516909a_0             https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    zlib:             1.2.11-h516909a_1006         https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? <span class="comment">#输入y即可，可以看到安装包均从上文中配置的地址中下载</span></span><br><span class="line"></span><br><span class="line">Downloading and Extracting Packages</span><br><span class="line">ca-certificates-2020 | 147 KB    | <span class="comment">##################################### | 100% </span></span><br><span class="line">certifi-2020.4.5.2   | 152 KB    | <span class="comment">##################################### | 100% </span></span><br><span class="line">ld_impl_linux-64-2.3 | 616 KB    | <span class="comment">##################################### | 100% </span></span><br><span class="line">Preparing transaction: <span class="keyword">done</span></span><br><span class="line">Verifying transaction: <span class="keyword">done</span></span><br><span class="line">Executing transaction: <span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To activate this environment, use:</span></span><br><span class="line"><span class="comment"># &gt; source activate env_name</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To deactivate an active environment, use:</span></span><br><span class="line"><span class="comment"># &gt; source deactivate</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>安装完成后，我们可以通过 <code>$ source activate env_name</code>来打开创建好的环境，<code>pip list</code>可查看当前环境下已经安装的轮子，<code>pip show [package_name]</code>可以查看轮子的版本等信息（输入时去掉中括号）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(env_name)[root]$ pip list <span class="comment">#查看已安装轮子</span></span><br><span class="line">Package    Version</span><br><span class="line">---------- -------------------</span><br><span class="line">certifi    2020.4.5.2</span><br><span class="line">pip        20.1.1</span><br><span class="line">setuptools 47.1.1.post20200529</span><br><span class="line">wheel      0.34.2</span><br><span class="line">(env_name)[root]$ pip show certifi <span class="comment">#查看轮子信息</span></span><br><span class="line">Name: certifi</span><br><span class="line">Version: 2020.4.5.2</span><br><span class="line">Summary: Python package <span class="keyword">for</span> providing Mozilla<span class="string">'s CA Bundle.</span></span><br><span class="line"><span class="string">Home-page: https://certifiio.readthedocs.io/en/latest/</span></span><br><span class="line"><span class="string">Author: Kenneth Reitz</span></span><br><span class="line"><span class="string">Author-email: me@kennethreitz.com</span></span><br><span class="line"><span class="string">License: MPL-2.0</span></span><br><span class="line"><span class="string">Location: /..../Anaconda/envs/test/lib/python3.6/site-packages</span></span><br><span class="line"><span class="string">Requires: </span></span><br><span class="line"><span class="string">Required-by:</span></span><br></pre></td></tr></table></figure>
<p>同样的，为了加速 <strong>conda</strong> 环境内 <strong>pip</strong> 下载的速度我们首先更换下载源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(env_name)[root]$ pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Writing to /..../.config/pip/pip.conf</span><br></pre></td></tr></table></figure>
<p>之后，可通过 <code>$pip install package</code> 的命令下载和安装轮子了（如果没有配置下载源的话，可以通过<code>$ pip install package -i https://pypi.tuna.tsinghua.edu.cn/simple</code>的方式临时使用 <strong>url</strong> 下载）。需要注意的是，该环境下安装的包只能在环境内使用，这也允许我们能够使用多个版本的生产环境，只需要<code>$ source activate env_name</code>即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#笔者使用的生产环境之一为：</span></span><br><span class="line">(env_name)[root]$ pip install tensorflow-gpu==1.14.0</span><br><span class="line">(env_name)[root]$ pip install keras==2.2.5</span><br><span class="line">(env_name)[root]$ pip install numpy==1.16.0</span><br><span class="line">(env_name)[root]$ <span class="built_in">source</span> deactivate <span class="comment">#退出已打开的环境env_name</span></span><br></pre></td></tr></table></figure>
<h2 id="conda-常用命令"><a href="#conda-常用命令" class="headerlink" title="conda 常用命令"></a>conda 常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda --version <span class="comment">#查看conda版本</span></span><br><span class="line">$ conda creat -n your_env_name python==3.x <span class="comment">#创建python版本为3.x的conda环境</span></span><br><span class="line">$ conda remove --name your_env_name –all <span class="comment">#删除已创建环境</span></span><br><span class="line">$ conda create --name new_env --<span class="built_in">clone</span> old_env <span class="comment">#创建新conda环境new_env并将old_env环境复制到前者中</span></span><br><span class="line">$ <span class="built_in">source</span> activate your_env_name <span class="comment">#激活已创建环境</span></span><br><span class="line">$ <span class="built_in">source</span> deactivate <span class="comment">#退出当前窗口中已激活环境</span></span><br><span class="line">$ conda info -e  <span class="comment">#查询已安装环境</span></span><br><span class="line">$ conda install --name your_env_name package_name <span class="comment">#在指定环境your_env_name中安装package_name包（例如conda install my_env tensorflow-gpu==2.0.0）</span></span><br><span class="line">$ conda update conda <span class="comment">#（不推荐）将conda更新至最新版本，但也会更新其它相关包</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>深度学习环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下CUDA及cnDNN安装</title>
    <url>/2020/06/10/install_cudacudnn/</url>
    <content><![CDATA[<h1 id="工作站CentOS-7下CUDA驱动及cuDNN安装"><a href="#工作站CentOS-7下CUDA驱动及cuDNN安装" class="headerlink" title="工作站CentOS-7下CUDA驱动及cuDNN安装"></a>工作站CentOS-7下CUDA驱动及cuDNN安装</h1><h2 id="安装包选择及下载"><a href="#安装包选择及下载" class="headerlink" title="安装包选择及下载"></a>安装包选择及下载</h2><ul>
<li><strong>Nvidia驱动下载：</strong> 一般不使用 <strong>CUDA</strong> 安装包中的驱动程序，而是到<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">官方网站</a>根据 GPU 型号下载对应驱动，这里我们选择与 <strong>RTX2080Ti</strong> 对应的<a href="http://cn.download.nvidia.com/XFree86/Linux-x86_64/440.82/NVIDIA-Linux-x86_64-440.82.run" target="_blank" rel="noopener">440.82-Linux 64-bit</a>版本，笔者首先安装的驱动，然后才装的 <strong>CUDA-10.0</strong> ，理论上二者先后顺序没有强制性。若先装 <strong>CUDA</strong> 的话记住<strong>不要不要不要不要安装自带的驱动程序</strong>，否则<strong>可能会出现重启后黑屏无法进入系统等问题</strong>。<strong>Ubuntu</strong> 中一般能够通过命令行操作删除驱动和 <strong>CUDA</strong>，但在 <strong>CentOS</strong> 系统中可能会导致无法进入终端命令行字符界面，完全黑屏时最粗暴的处理办法就是重装系统，<strong>grub</strong> 中的操作方式笔者没有研究过。当然了，如果先装驱动程序后装 <strong>CUDA</strong> ，自带的驱动自然也是不需要安装的。</li>
<li><strong>CUDA Toolkit</strong> 下载：版本根据实际需要进行选择，笔者最开始接触的GPU并行编程语言的时候就已经是 <strong>v10.0</strong> 了(现在最新版本为 <strong><a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux" target="_blank" rel="noopener">CUDA11</a></strong>)，本机器上安装的 <strong><a href="https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda-repo-rhel7-10-0-local-10.0.130-410.48-1.0-1.x86_64" target="_blank" rel="noopener">CUDA_10.0.130</a></strong>（<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">历史版本 <strong>CUDA</strong> 下载地址</a>）</li>
<li><strong>cuDNN下载</strong>：下载 <strong>cuDNN</strong> 前要先注册一个 <strong>Nvidia</strong> 账户，忘记密码的话通过官方渠道申请修改密码可能会遇到无法收到邮件的问题，这一问题暂时没有好的解决办法；如果没有账户的话直接注册一个即可，（注册账户的邮件能收到，修改密码的经常收不到，同时我们注意到官方开通了微信或者QQ登陆方式，但是我打不开。。。），<strong>cuDNN</strong> 版本与 <strong>CUDA</strong> 版本要对应上，这里笔者使用的是与 <strong>CUDA10.0</strong>对应的 <strong>cuDNN7</strong> (cudnn-10.0-linux-x64-v7.6.5.32，没有链接，刚改了密码又忘了登不上去了= =)。</li>
</ul>
<table>
<thead>
<tr>
<th>CUDA Toolkit</th>
<th>Linuxx86_64驱动版本</th>
<th>Windowsx86_64驱动版本</th>
</tr>
</thead>
<tbody><tr>
<td>CUDA 10.2.89</td>
<td>&gt;= 440.33</td>
<td>&gt;= 441.22</td>
</tr>
<tr>
<td>CUDA 10.1 (10.1.105 general release, and updates)</td>
<td>&gt;= 418.39</td>
<td>&gt;= 418.96</td>
</tr>
<tr>
<td>CUDA 10.0.130</td>
<td>&gt;= 410.48</td>
<td>&gt;= 411.31</td>
</tr>
<tr>
<td>CUDA 9.2 (9.2.148 Update 1)</td>
<td>&gt;= 396.37</td>
<td>&gt;= 398.26</td>
</tr>
<tr>
<td>CUDA 9.2 (9.2.88)</td>
<td>&gt;= 396.26</td>
<td>&gt;= 397.44</td>
</tr>
<tr>
<td>CUDA 9.1 (9.1.85)</td>
<td>&gt;= 390.46</td>
<td>&gt;= 391.29</td>
</tr>
<tr>
<td>CUDA 9.0 (9.0.76)</td>
<td>&gt;= 384.81</td>
<td>&gt;= 385.54</td>
</tr>
<tr>
<td>CUDA 8.0 (8.0.61 GA2)</td>
<td>&gt;= 375.26</td>
<td>&gt;= 376.51</td>
</tr>
<tr>
<td>CUDA 8.0 (8.0.44)</td>
<td>&gt;= 367.48</td>
<td>&gt;= 369.30</td>
</tr>
</tbody></table>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>在准备好以下三个文件后就可以开始安装了（最好先把它们都下载下来放到U盘里，做好多次重装系统的准备）</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cuda_10.0.130_410.48_linux.run <span class="comment">#CUDA Toolkit</span></span><br><span class="line">$ cudnn-10.0-linux-x64-v7.6.5.32.tgz <span class="comment">#cuDNN for CUDA10</span></span><br><span class="line">$ NVIDIA-Linux-x86_64-440.82.run <span class="comment">#Nvidia-driver for RTX2080Ti</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Nvidia 驱动及CUDA安装</strong></li>
</ul>
<p>首先查看是否开启了默认的 <strong>nouveau</strong> 驱动，如果输入<code>lsmod | grep nouveau</code> 没有任何提示的话则已经关闭了该驱动，若有提示，则需要首先禁用该驱动:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ cp /etc/modprobe.d/blacklist.conf /etc/modprobe.d/blacklist.conf.back <span class="comment">#备份原有黑名单</span></span><br><span class="line">[root]$ <span class="built_in">echo</span> -e <span class="string">"blacklist nouveau\noptions nouveau modeset=0"</span> &gt; /etc/modprobe.d/blacklist.conf <span class="comment">#禁用nouveau驱动</span></span><br><span class="line">[root]$ mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.back <span class="comment">#备份initramfs</span></span><br><span class="line">[root]$ dracut /boot/initramfs-$(uname -r).img $(uname -r) --force <span class="comment">#重建initramfs</span></span><br><span class="line">[root]$ init 6 <span class="comment">#重启</span></span><br><span class="line">[root]$ <span class="built_in">cd</span> /../../ <span class="comment">#切换到驱动所在目录</span></span><br><span class="line">[root]$ sh ./NVIDIA-Linux-x86_64-440.82.run <span class="comment">#执行安装过程</span></span><br><span class="line">[root]$ nvidia-smi <span class="comment">#查看驱动是否安装成功，若顺利输出GPU信息则成功，或者切换到Toolkit的Samples中编译并运行带着的例子，显示Result=PASS则能够顺利运行CUDA程序。</span></span><br><span class="line">[root]$ sh ./cuda_10.0.130_410.48_linux.run <span class="comment">#安装CUDA Toolkit，记住不要安装里面带着的驱动</span></span><br><span class="line">[root]$ reboot <span class="comment">#安装完成重启，顺利进入图形界面～</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>cuDNN</strong>安装</li>
</ul>
<p>话不多说直接上代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ <span class="built_in">cd</span> /../../ <span class="comment">#切换到cuDNN安装包所在目录</span></span><br><span class="line">[root]$ tar -xzvf cudnn-10.0-linux-x64-v7.6.5.32.tgz <span class="comment">#解压cudnn到当前文件夹</span></span><br><span class="line">[root]$ cp cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda-10.0/include/</span><br><span class="line">[root]$ cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda/lib64/</span><br><span class="line">[root]$ chmod a+r /usr/<span class="built_in">local</span>/cuda-10.0/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/lib64/libcudnn*</span><br><span class="line"><span class="comment">#以下两步为解决tensorflow运行中找不到链接文件的问题，如果CUDA版本不同请自主更改系统路径</span></span><br><span class="line">[root]$ cp /usr/<span class="built_in">local</span>/cuda-10.0/lib64/libcublas.so.10.0 /usr/<span class="built_in">local</span>/lib/libcublas.so.10.0 &amp;&amp; sudo ldconfig</span><br><span class="line">[root]$ cp /usr/<span class="built_in">local</span>/cuda-10.0/lib64/libcufft.so.10.0 /usr/<span class="built_in">local</span>/lib/libcufft.so.10.0 &amp;&amp; sudo ldconfig</span><br><span class="line">[username]$ vim ~/.bashrc <span class="comment">#个人账户下CUDA相关环境变量的配置</span></span><br><span class="line"><span class="comment">#--------------------------------------------------#</span></span><br><span class="line">CUDA_HOME=/usr/<span class="built_in">local</span>/cuda-10.0</span><br><span class="line">PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/cuda-10.0/bin</span><br><span class="line">LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-10.0/lib64</span><br><span class="line"><span class="built_in">export</span> CUDA_HOME PATH LD_LIBRARY_PATH</span><br><span class="line"><span class="comment">#--------------------------------------------------#</span></span><br><span class="line">[username]$ <span class="built_in">source</span> ~/.bashrc <span class="comment">#配置完成后立即更新环境变量</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查看是否安装成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ nvcc --version <span class="comment">#查看编译器及CUDA版本</span></span><br><span class="line">[root]$ nvidia-smi <span class="comment">#查看GPU信息、驱动版本</span></span><br><span class="line">[root]$ cat /usr/<span class="built_in">local</span>/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 <span class="comment">#查看cuDNN版本</span></span><br></pre></td></tr></table></figure>
<h2 id="进阶设置"><a href="#进阶设置" class="headerlink" title="进阶设置"></a>进阶设置</h2><h3 id="1-安装温度监控器"><a href="#1-安装温度监控器" class="headerlink" title="1.  安装温度监控器"></a>1.  安装温度监控器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ yum install lm_sensors <span class="comment">#下载安装lm_sensors插件</span></span><br><span class="line">[root]$ /usr/sbin/sensors-detect <span class="comment">#运行sensors-detect配置程序</span></span><br><span class="line">[notroot]$ sensors <span class="comment">#查看已允许检测设备的当前状态</span></span><br></pre></td></tr></table></figure>
<h3 id="2-手动控制-GPU-风扇转速"><a href="#2-手动控制-GPU-风扇转速" class="headerlink" title="2. 手动控制 GPU 风扇转速"></a>2. 手动控制 <strong>GPU</strong> 风扇转速</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ cp /etc/X11/xorg.conf /etc/X11/xorg.conf.back <span class="comment">#备份原有xorg配置文件</span></span><br><span class="line">[root]$ vim xorg.conf</span><br><span class="line"><span class="comment">#-----------File Start--------------#</span></span><br><span class="line">Section <span class="string">"Device"</span></span><br><span class="line">       Identifier  <span class="string">"Videocard0"</span></span><br><span class="line">       Driver      <span class="string">"nvidia"</span></span><br><span class="line">       Option <span class="string">"Coolbits"</span> <span class="string">"4"</span> <span class="comment">#增加该行内容后重启，可在Applications-other-Nvidia X Server Settings-GPU-Thermal Settings</span></span><br><span class="line">EndSection</span><br><span class="line"><span class="comment">#-----------File End--------------#</span></span><br><span class="line">[root]$ nvidia-settings -a <span class="string">"[gpu:0]/GPUFanControlState=0"</span> <span class="comment">#恢复GPU转速随温度控制</span></span><br></pre></td></tr></table></figure>
<h3 id="3-常用-GPU-相关命令"><a href="#3-常用-GPU-相关命令" class="headerlink" title="3. 常用 GPU 相关命令"></a>3. 常用 GPU 相关命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvidia-smi -L <span class="comment">#列出所有可使用的GPU设备</span></span><br><span class="line">$ nvidia-smi -l <span class="comment">#与nvidia-smi功能相同但带有自动刷新功能（不清空输出缓存区）</span></span><br><span class="line">$ nvidia-smi -q <span class="comment">#查看所有GPU设备信息</span></span><br><span class="line">$ nvidia-smi –pm 0/1 <span class="comment">#设置持久模式：0/DISABLED,1/ENABLED</span></span><br><span class="line">$ nvidia-smi –e 0/1 <span class="comment">#切换ECC支持：0/DISABLED, 1/ENABLED</span></span><br><span class="line">$ nvidia-smi –p 0/1 <span class="comment">#重置ECC错误计数：0/VOLATILE, 1/AGGREGATE</span></span><br><span class="line">$ nvidia-smi –c <span class="comment">#设置计算应用模式：0/DEFAULT,1/EXCLUSIVE_PROCESS,2/PROHIBITED</span></span><br><span class="line">$ nvidia-smi –r <span class="comment">#GPU复位</span></span><br><span class="line">$ nvidia-smi –vm <span class="comment">#设置GPU虚拟化模式</span></span><br><span class="line">$ nvidia-smi –ac xxx,xxx <span class="comment">#设置GPU运行的工作频率。e.g. nvidia-smi –ac2000,800</span></span><br><span class="line">$ nvidia-smi –rac <span class="comment">#0/1 将时钟频率重置为默认值</span></span><br><span class="line">$ nvidia-smi –acp <span class="comment">#切换-ac和-rac的权限要求，0/UNRESTRICTED, 1/RESTRICTED</span></span><br><span class="line">$ nvidia-smi –pl <span class="comment">#指定最大电源管理限制（瓦特）</span></span><br><span class="line">$ nvidia-smi –am 0/1 <span class="comment">#启用或禁用计数模式，0/DISABLED,1/ENABLED</span></span><br><span class="line">$ nvidia-smi –caa <span class="comment">#清除缓冲区中的所有已记录PID，0/DISABLED,1/ENABLED</span></span><br></pre></td></tr></table></figure>
<h3 id="4-动态监控"><a href="#4-动态监控" class="headerlink" title="4. 动态监控"></a>4. 动态监控</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#实际上，可以使用watch命令实现动态监控(不需要root权限)</span></span><br><span class="line">$ watch -n 1 sensors <span class="comment"># 1表示每隔一秒刷新sensors</span></span><br><span class="line">$ watch -n 1 nvidia-smi <span class="comment">#同理可动态监控GPU运行状态，以判断Tensorfow是否正确使用了GPU运行</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>CUDA及cuDNN下载与安装</tag>
      </tags>
  </entry>
</search>
