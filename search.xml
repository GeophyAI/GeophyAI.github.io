<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Dell工作站CentOS-7装机</title>
    <url>/2020/06/07/installation/</url>
    <content><![CDATA[<h1 id="工作站CentOS7装机"><a href="#工作站CentOS7装机" class="headerlink" title="工作站CentOS7装机"></a>工作站CentOS7装机</h1><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>本次装机的工作站型号为<strong>Dell Precision T3630</strong>，搭载有<strong>Intel(R)Xoen@E2286G</strong>处理器（6核心/12线程，4.00GHz），512G固态硬盘、1T机械硬盘以及<strong>RTX2080Ti</strong>显卡一张（单涡轮）。文章将分为以下几部分介绍：</p>
<a id="more"></a>
<ol>
<li><strong>CentOS7</strong>系统安装；</li>
<li>显卡驱动、<strong>CUDA Toolkit</strong>以及<strong>cuDNN</strong>安装；</li>
<li>深度学习环境配置，诸如常用的框架 <strong>Tensorflow</strong>、<strong>Keras</strong>等；</li>
</ol>
<p><em>本章节主要介绍第一部分内容，其它内容将在其它日志中更新，欢迎关注。需要注意的是除系统iso文件外，其他所有安装包作者均在安装完的系统内部下载的（主机插了网线，下载速度比较快，卧室离路由器太远收不到5GHz的信号，2.5GHz下载实在是太慢了），如果没有有线网络的小伙伴可以考虑将手机接到主机上联网下载，而且这台工作站支持Type-c接口哦。</em></p>
<h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p><em>准备工作</em>：一个6G及以上内存的U盘（用于镜像文件的制作，CentOS7安装文件大小为4.8G），一个U盘启动制作工具以及CentOS-7-x86_64-xxx.iso镜像文件一个。<br>U盘制作工具使用<a href="https://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">UltraISO</a>，镜像文件使用国内的<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">阿里云源</a>下载，作者安装的是DVD版本（<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2003.iso" target="_blank" rel="noopener">CentOS-7-x86_64-DVD-2003.iso</a>），文件大小为4.5G，此安装包内能够满足一般用户的需求，并且在安装过程中可以根据实际需要对packages进行选择。选择此版本的原因是保持与实验室工作站环境的一致性，尽量减少代码移植过程中出现的问题（但人工智能的代码的可移植性是比较差的，其主要与<em>Tensorflow</em>、<em>Keras</em>等框架的版本相关）。</p>
<h2 id="CentOS7-64bit系统安装"><a href="#CentOS7-64bit系统安装" class="headerlink" title="CentOS7-64bit系统安装"></a>CentOS7-64bit系统安装</h2><h3 id="U盘启动制作"><a href="#U盘启动制作" class="headerlink" title="U盘启动制作"></a>U盘启动制作</h3><ol>
<li>下载并安装UltraISO（<a href="https://cn.ultraiso.net/xiazai.html" target="_blank" rel="noopener">下载地址</a>）；</li>
<li>下载CentosOS-7镜像文件（<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/" target="_blank" rel="noopener">下载地址</a>），选择DVD版本（<a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/CentOS-7-x86_64-DVD-2003.iso" target="_blank" rel="noopener">CentOS-7-x86_64-DVD-2003.iso</a>）；</li>
<li>备用电脑中插入U盘（制作启动U盘需要将其格式化，所以先要备份好U盘中的原始数据）；</li>
<li>打开UltraISO程序—<strong>继续试用</strong>；<br><img src="/2020/06/07/installation/ultraiso_enter.png" alt="UltraISO"></li>
<li>单击左上角<strong>文件</strong>—<strong>打开</strong>；<br><img src="/2020/06/07/installation/ultraiso_open.png" alt="UltraISOstart"></li>
<li>选择下载好的iso文件；<br><img src="/2020/06/07/installation/ultraiso_select.png" alt="SelectISO"></li>
<li><strong>启动</strong>—<strong>写入硬盘映像</strong><br><img src="/2020/06/07/installation/ultraiso_start.png" alt="WriteSelect"></li>
<li>在<strong>硬盘驱动器</strong>一栏选择自己的U盘，其他设置保持默认，然后单击<strong>写入</strong>开始U盘启动制作过程；<br><img src="/2020/06/07/installation/ultraiso_write.png" alt="WriteToUdisk"></li>
<li>写入完成后我们可以看到U盘盘符的名字有些奇怪(UltraISO软件问题，使用其他U盘启动制作工具可能会解决该问题)，如果直接用它安装系统会出现错误，这时我们要修改U盘的盘符(U盘处右键—属性)为引号内的内容“ <strong>CENTOS7</strong> ”（必须为大写）；<br><img src="/2020/06/07/installation/u_modify.png" alt="ModifyU"></li>
<li>然后进入<em>U盘/EFI/BOOT</em>，在目录中找到grub.cfg文件并打开，将其中所有的 <strong>CentOS\x207\x20x86_64</strong> 替换为 <strong>CENTOS7</strong>（与U盘盘符保持一致），这样启动盘就制作完成了。<br><img src="/2020/06/07/installation/grub.png" alt="Grub"></li>
</ol>
<h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><p> 作者使用的主机没有预装其它系统，准备只安装 <strong>CentOS7</strong> 用于科研。</p>
<ol>
<li>启动主机，在显示器显示 <strong><em>DELL</em></strong> 商标时 按下 <strong>F2</strong> 进入 <strong>BIOS</strong> 设置界面；<br><img src="/2020/06/07/installation/f2.jpg" alt="F2"></li>
<li>在 <strong>Settings—General—Boot Squence</strong> 右侧选择 <strong>UEFI</strong> 模式并点击下方的 <strong>Apply</strong> 按钮；<br><img src="/2020/06/07/installation/uefi.jpg" alt="BOOT"></li>
<li>在 <strong>Settings—System Configuration—SATA Operation</strong> 右侧选择 <strong>AHCI</strong> （默认为 <strong>RAID ON</strong>）使硬盘处于可发现模式，点击下方的 <strong>Apply</strong> 按钮；<br><img src="/2020/06/07/installation/ahci.jpg" alt="AHCI"></li>
<li>按下 <strong>Esc</strong> 保存设置，重启主机并在 <strong><em>DELL</em></strong> 商标界面按下 <strong>F12</strong>进入启动盘选择界面 ，确认 <strong>Boot mode</strong> 是否为 <strong>UEFI</strong> 以及 <strong>Secure Boot</strong> 是否为 <strong>off</strong> 状态，若状态有误则返回 <strong>BIOS</strong> 重新设置；<br><img src="/2020/06/07/installation/f10.jpg" alt="SELECTU"></li>
<li>若没有错误，选择 *<em>UEFI BOOT: *</em>下方的U盘并按回车、进入；</li>
<li>在安装界面选择 <strong>Install CentOS7</strong>；<br><img src="/2020/06/07/installation/install_centos7.jpg" alt="CENTOS7"></li>
<li><strong>SOFTWARE SELECTION</strong> 选择 <strong>GNOME Desktop</strong>，右侧可自定义需要安装的软件包以及环境；<br><img src="/2020/06/07/installation/selection.jpg" alt="SOFTWAVESELECTION"></li>
<li><strong>INSTALLATION DESTINATION</strong>  选择512G的固态硬盘并选择自动分区（在硬盘选择界面下方 <strong>Other Storage Options—Partitioning</strong> 处选择 <strong>Automatically configure partitioning</strong> ）</li>
<li><strong>Begin Installation</strong>；</li>
<li>系统安装过程中需要完成用户信息的设置，等待完成后 <strong>Reboot</strong>进入系统。</li>
</ol>
<h2 id="系统环境配置"><a href="#系统环境配置" class="headerlink" title="系统环境配置"></a>系统环境配置</h2><p>在 <strong>CentOS</strong> 使用过程中，我们经常需要从网络上下载各种安装包， <strong>yum(CentOS)</strong> 或 <strong>apt-get(Ubuntu)</strong> 是比较常用的方式，但是系统自带的安装源服务器都在国外，下载速度非常慢，因此我们需要使用国内的诸如清华源、豆瓣源、阿里源等加速下载，下面介绍一些简单的下载加速技巧。<br>（以下操作均需要在 <strong>root</strong> 权限下运行）首先，查看系统是否安装有 <strong>wget</strong>：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ wget --version</span><br></pre></td></tr></table></figure>
<p>如果未安装的话首先使用 <strong>yum</strong> 进行安装（）：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ yum -y install wget</span><br><span class="line"><span class="comment"># -y 表示安装的自动选择</span></span><br></pre></td></tr></table></figure>
<p>再次查询即可看到 <strong>wget</strong> 的安装位置、版本等信息。<br>然后备份系统原有的 <strong>yum</strong> 下载源并下载阿里源、生成缓存：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root] cp /etc/yum.repos.d/CentOS-Base.repo /etc/yum.repos.d/CentOS-Base.repo.bak</span><br><span class="line">[root] wget -O /etc/yum.repos.d/CentOS-Base.repo http://mirrors.aliyun.com/repo/Centos-7.repo <span class="comment">#阿里云安装，也可以安装网易等源</span></span><br><span class="line">[root] yum makecache <span class="comment">#生成缓存</span></span><br></pre></td></tr></table></figure>
<p>安装ntfs-3g以挂载ntfs格式的硬盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root] wget https://tuxera.com/opensource/ntfs-3g_ntfsprogs-2017.3.23.tgz</span><br><span class="line">[root] tar zxvf ntfs-3g_ntfsprogs-2017.3.23.tgz</span><br><span class="line">[root] ./configure</span><br><span class="line">[root] <span class="built_in">cd</span> ntfs-3g_ntfsprogs-2017.3.23/</span><br><span class="line">[root] make</span><br><span class="line">[root] make install</span><br><span class="line">[root] mount -t ntfs-3g /deb/sda2 /mnt/data/</span><br></pre></td></tr></table></figure>
<p>设置开机自动挂载硬盘</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root] <span class="built_in">cd</span> /etc</span><br><span class="line">[root] cp fstab fstab.bak</span><br><span class="line">[root] vim fstab</span><br><span class="line"><span class="comment">##---file start---##</span></span><br><span class="line">/dev/sda(替换为自己的盘符)         /mnt/data(替换为自己需要挂载的路径)  ntfs-3g  defaults  0 0</span><br><span class="line"><span class="comment">##---file end--##</span></span><br></pre></td></tr></table></figure>

<p>这时就可以畅快地使用 <code>yum -y install</code>畅快地下载各种安装包啦。</p>
]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>CentOS系统安装</tag>
      </tags>
  </entry>
  <entry>
    <title>Linux中论文写作环境搭建</title>
    <url>/2020/07/02/paper_env/</url>
    <content><![CDATA[<h1 id="文字编辑器"><a href="#文字编辑器" class="headerlink" title="文字编辑器"></a>文字编辑器</h1><p>使用 <a href="https://linux.wps.cn/" target="_blank" rel="noopener">WPS for linux</a>，安装包格式为rpm，安装过程如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[usrname]$ rpm -ivh wps-office-11.1.0.9522-1.x86_64.rpm</span><br><span class="line"><span class="comment">#安装完成后可能会缺少相关字体，例如中文论文常用的宋体、黑体等，可以从windows中拷贝到linux下，将ttf字体文件复制到/usr/share/fonts/wps-office文件夹中，重启wps即可看到中文字体</span></span><br><span class="line">[usrname]$ wps <span class="comment"># 安装包中包含PDF、Presentation、Spreadsheets和Writter</span></span><br></pre></td></tr></table></figure>
<p>常用部分中文 <strong>ttf</strong> 格式字体<a href="https://pan.baidu.com/s/19eR8GaxYuE6ISLGdVGWUDg" target="_blank" rel="noopener">百度网盘(提取码:s7lq)</a>。</p>
<h1 id="公式编辑器"><a href="#公式编辑器" class="headerlink" title="公式编辑器"></a>公式编辑器</h1><p>使用 <strong><a href="https://www.xm1math.net/texmaker/download.html" target="_blank" rel="noopener">texmaker</a></strong>，实际上完全可以使用 <strong>texmaker</strong> 完成整个论文撰写工作。（<code>#texmaker 的下载要注意与qt版本相对应</code>）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[usrname]$ tar -jxvf texmaker-5.0.3.tar.bz2</span><br><span class="line">[usrname]$ <span class="built_in">cd</span> texmaker-5.0.3/</span><br><span class="line">[usrname]$ qmake texmaker.pro</span><br><span class="line">[usrname]$ make &amp;&amp; make install</span><br><span class="line">[usrname]$ texmaker</span><br></pre></td></tr></table></figure>
<h1 id="安装32位wine"><a href="#安装32位wine" class="headerlink" title="安装32位wine"></a>安装32位wine</h1><p>在研究 <strong>LaTex</strong> 搭配 <strong>python</strong> 中的 <code>pandoc</code>实现 <code>tex2word</code> 无果后（经由<code>pandoc</code>转换出的word文件会丢失部分 <strong>tex</strong> 中设置好的格式，可能是<code>\usepackage</code>导致的；但如果只需要由 <strong>tex</strong> 生成 <strong>pdf</strong>文件，LaTex还是值得深入学习一下的），退而求其次，本来想通过wine安装 <strong>MS office</strong>，但转念一想不如装个 <strong>MathTpye</strong> 来的方便，结果也没好装到哪去。。。</p>
<p>为了使用32位MathType，首先安装32位wine，小编安装的是<a href="https://dl.winehq.org/wine/source/5.0/wine-5.0.1.tar.xz" target="_blank" rel="noopener">5.0.1版本源码</a>，由于主机环境为x86_64，所以我们需要为系统安装32位依赖环境，否则无法执行 <strong>./configure</strong> ：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ yum install glibc-devel.i686 dbus-devel.i686 freetype-devel.i686 pulseaudio-libs-devel.i686 </span><br><span class="line"> libX11-devel.i686 mesa-libGLU-devel.i686 libICE-devel.i686 libXext-devel.i686 libXcursor-devel.i686 </span><br><span class="line"> libXi-devel.i686 libXxf86vm-devel.i686 libXrender-devel.i686 libXinerama-devel.i686 libXcomposite-devel.i686 </span><br><span class="line"> libXrandr-devel.i686 mesa-libGL-devel.i686 mesa-libOSMesa-devel.i686 libxml2-devel.i686 libxslt-devel.i686 </span><br><span class="line"> zlib-devel.i686 gnutls-devel.i686 ncurses-devel.i686 sane-backends-devel.i686 libv4l-devel.i686 </span><br><span class="line"> libgphoto2-devel.i686 libexif-devel.i686 lcms2-devel.i686 gettext-devel.i686 isdn4k-utils-devel.i686 </span><br><span class="line"> cups-devel.i686 fontconfig-devel.i686 gsm-devel.i686 libjpeg-turbo-devel.i686 pkgconfig.i686  </span><br><span class="line"> libtiff-devel.i686 unixODBC.i686 openldap-devel.i686 alsa-lib-devel.i686 audiofile-devel.i686 </span><br><span class="line"> freeglut-devel.i686 giflib-devel.i686 gstreamer-devel.i686 gstreamer-plugins-base-devel.i686 libXmu-devel.i686 </span><br><span class="line"> libXxf86dga-devel.i686 libieee1284-devel.i686 libpng-devel.i686 librsvg2-devel.i686 </span><br><span class="line"> libstdc++-devel.i686 libusb-devel.i686 unixODBC-devel.i686 qt-devel.i686</span><br><span class="line">[root]$ yum install libXext.i686</span><br><span class="line">[root]$ yum install libXext.x86_64</span><br><span class="line">[root]$ yum install ia32-libs.i686</span><br><span class="line">[root]$ yum install xulrunner.i686</span><br><span class="line">[root]$ yum install libX11-devel freetype-devel zlib-devel libxcb-devel</span><br><span class="line">[root]$ tar -xvf wine-5.0.1.tar.xz</span><br><span class="line">[root]$ <span class="built_in">cd</span> wine-5.0.1</span><br><span class="line">[root]$ ./configure</span><br><span class="line">[root]$ make <span class="comment">#make耗费时间比较长，耐心等待即可</span></span><br><span class="line">[root]$ make install</span><br><span class="line">[root]$ wine --version <span class="comment">#查看32位wine版本</span></span><br></pre></td></tr></table></figure>
<p>然后执行<code>winecfg</code>，如果系统默认语言为 <strong>en</strong>，此时看到的 <strong>wine</strong> 配置界面应同样为英文，若系统已经安装了中文字体，例如 <strong>simsun.ttf</strong> 等，在 <strong>terminal</strong> 执行<code>export LANG=zh_CN.utf8</code> 即可将语言临时调整为中文。</p>
<h1 id="中文版MathType安装及语言配置"><a href="#中文版MathType安装及语言配置" class="headerlink" title="中文版MathType安装及语言配置"></a>中文版MathType安装及语言配置</h1><p>下载好 <strong>Mathtype</strong> 之后，打开系统（屏幕左上角）的<code>Applications &gt; Wine &gt; Wine Software uninstaller</code>，点击其中的<code>install</code>并选择安装包即可完成安装。可以通过<code>Applications &gt; Wine &gt; MathType</code>打开公式编辑器。</p>
<p>如果字体出现乱码等情况，首先要考虑是否系统环境与wine环境不一致所导致，详情请参考：<a href="http://linux-wiki.cn/wiki/zh-hans/wine%E7%9A%84%E4%B8%AD%E6%96%87%E6%98%BE%E7%A4%BA%E4%B8%8E%E5%AD%97%E4%BD%93%E8%AE%BE%E7%BD%AE" target="_blank" rel="noopener">这位热心网友的解答</a>。</p>
<p>小编在修改完<code>~/.wine/system.reg</code>以及<code>~/.wine//drive_c/windows/win.ini</code>（root用户和普通用户根目录下都含有此文件，均做修改并不能解决字体部分乱码问题，怀疑是系统语言的限制）后运行 <strong>MathType</strong> 过程中出现部分中文字体为 ？？？的情况，再次运行<code>export LANG=zh_CN.utf8</code>即可显示所有中文字体。（测试发现，如果系统环境为en，需要在每次启动MathType时在terminal中临时切换为中文，即运行上述代码。或者，使用 <code>alias</code> 为软件创建命令行快捷打开方式）。</p>
]]></content>
      <categories>
        <category>paper</category>
      </categories>
      <tags>
        <tag>Linux&amp;Windows--cross</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之import argparse</title>
    <url>/2020/06/21/python_argparse/</url>
    <content><![CDATA[<h1 id="Python之命令行解析–argparse"><a href="#Python之命令行解析–argparse" class="headerlink" title="Python之命令行解析–argparse"></a>Python之命令行解析–argparse</h1><p>在 <strong>terminal</strong> 执行 <strong>.py</strong> 文件经常遇到。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ <span class="keyword">import</span> argparse</span><br><span class="line">$ Aparser = argparse.ArgumentParser(</span><br><span class="line">		    prog=<span class="literal">None</span>, <span class="comment">#给程序起名儿，默认为sys.argv[0]</span></span><br><span class="line">		    usage=<span class="literal">None</span>, <span class="comment">#参数用法备注，默认从参数中自动生成</span></span><br><span class="line">		    description=<span class="literal">None</span>, <span class="comment">#程序目的备注，显示在help之前</span></span><br><span class="line">		    epilog=<span class="literal">None</span>, <span class="comment">#参数描述后跟着的解释，显示在help之后</span></span><br><span class="line">		    parents=[], <span class="comment">#由ArgumentParser对象组成的列表，它们的arguments选项会被包含到新ArgumentParser对象中。(类似于继承)</span></span><br><span class="line">		    formatter_class=&lt;class 'argparse.HelpFormatter'&gt;, #help输出格式</span><br><span class="line">		    prefix_chars=<span class="string">'-'</span>, <span class="comment">#每个参数的前缀，默认为‘- arg’</span></span><br><span class="line">		    fromfile_prefix_chars=<span class="literal">None</span>, <span class="comment">#前缀字符，放置在文件名之前</span></span><br><span class="line">		    argument_default=<span class="literal">None</span>, <span class="comment">#没用到</span></span><br><span class="line">		    conflict_handler=<span class="string">'error'</span>, <span class="comment">#冲突解决，保持默认</span></span><br><span class="line">		    add_help=<span class="literal">True</span>, <span class="comment">#是否增加-h/-help选项 (默认为True)。设为False时，help信息里面不再显示-h –help信息.</span></span><br><span class="line">		    allow_abbrev=<span class="literal">True</span>, <span class="comment">#允许较长的参数名称使用缩写</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure>
<p>测试代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">##aarparse.py:测试argparse</span></span><br><span class="line"><span class="comment">##aarparse.py:测试argparse</span></span><br><span class="line"><span class="keyword">import</span> argparse</span><br><span class="line">parser = argparse.ArgumentParser(prog = <span class="string">'我叫测试程序'</span>, description=<span class="string">'测试argparse模块'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--第一个参数'</span>, metavar = <span class="string">'&lt;参数备注&gt;'</span>, default = <span class="number">1996</span>,</span><br><span class="line">                    help=<span class="string">'显示第一个参数的用处'</span>, type = int)</span><br><span class="line">parser.add_argument(<span class="string">'--第二个参数'</span>, metavar = <span class="string">'&lt;参数备注&gt;'</span>,</span><br><span class="line">                    help=<span class="string">'显示第二个参数的用处'</span>, type = int)</span><br><span class="line">parser.add_argument(<span class="string">'--third_parameter'</span>, type = str, default = <span class="string">'input'</span>, help = <span class="string">'what will third_parameter do?'</span>)</span><br><span class="line">parser.add_argument(<span class="string">'--choices'</span>, type = int, default = <span class="number">1</span> , choices =[<span class="string">'1'</span>,<span class="string">'3'</span>,<span class="string">'8'</span>], help = <span class="string">'choose a number from chioces'</span>)</span><br><span class="line">args = parser.parse_args()</span><br><span class="line"><span class="keyword">if</span> args.第一个参数 == <span class="number">2020</span>:</span><br><span class="line">    print(<span class="string">'今年是2020年。'</span>)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    print(<span class="string">'今年是'</span> + str(args.第一个参数) + <span class="string">'年。'</span>)</span><br><span class="line">print(<span class="string">'choices = '</span> + str(args.choices))</span><br></pre></td></tr></table></figure>
<p>测试结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">$ python aarparse.py -h</span><br><span class="line">usage: 我叫测试程序 [-h] [--第一个参数 &lt;参数备注&gt;] [--第二个参数 &lt;参数备注&gt;]</span><br><span class="line">              [--third_parameter THIRD_PARAMETER] [--choices &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>&#125;]</span><br><span class="line"></span><br><span class="line">测试argparse模块</span><br><span class="line"></span><br><span class="line">optional arguments:</span><br><span class="line">  -h, --help            show this help message <span class="keyword">and</span> exit</span><br><span class="line">  --第一个参数 &lt;参数备注&gt;        显示第一个参数的用处</span><br><span class="line">  --第二个参数 &lt;参数备注&gt;        显示第二个参数的用处</span><br><span class="line">  --third_parameter THIRD_PARAMETER</span><br><span class="line">                        what will third_parameter do?</span><br><span class="line">  --choices &#123;<span class="number">1</span>,<span class="number">3</span>,<span class="number">8</span>&#125;     choose a number <span class="keyword">from</span> chioces</span><br><span class="line">$ python aarparse.py</span><br><span class="line">今年是<span class="number">1996</span>年。</span><br><span class="line">choices = <span class="number">1</span></span><br><span class="line">$ python aarparse.py --第一个参数 <span class="number">2020</span> --choices <span class="number">3</span></span><br><span class="line">今年是<span class="number">2020</span>年。</span><br><span class="line">choices = <span class="number">3</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>argparse</tag>
      </tags>
  </entry>
  <entry>
    <title>Python之更换matplotlib字体</title>
    <url>/2020/06/24/python_fontofmatplotlib.pyplot/</url>
    <content><![CDATA[<h1 id="更换plt字体"><a href="#更换plt字体" class="headerlink" title="更换plt字体"></a>更换plt字体</h1><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#Windows环境为Win10，系统自带字体为ttf格式</span></span><br><span class="line">[Windows10]<span class="comment"># C:\Windows\Fonts</span></span><br><span class="line">[Linux]<span class="comment"># cd /../../Fonts #找个地方建个文件夹，把win的字体copy进去</span></span><br><span class="line"><span class="comment">##------.py Start------##</span></span><br><span class="line"><span class="comment">#以win10中New Times字体为例</span></span><br><span class="line"><span class="built_in">times</span> = matplotlib.font_manager.FontProperties(fname=<span class="string">'/Fonts/TIMES.TTF'</span>)</span><br><span class="line">fontname = <span class="built_in">times</span></span><br><span class="line">plt.xticks(fontproperties=fontname, fontsize=12)<span class="comment">#x轴标签</span></span><br><span class="line">plt.yticks(fontproperties=fontname, fontsize=12)<span class="comment">#y轴标签</span></span><br><span class="line">plt.xlabel(<span class="string">'x'</span>, fontproperties=fontname, fontsize=14)<span class="comment">#x坐标轴</span></span><br><span class="line">plt.ylabel(<span class="string">'y'</span>, fontproperties=fontname, fontsize=14)<span class="comment">#y坐标轴</span></span><br><span class="line">plt.legend(prop=fontname,fontsize=12)<span class="comment">#图例</span></span><br><span class="line">plt.show()</span><br><span class="line"><span class="comment">##------.py End------##</span></span><br></pre></td></tr></table></figure>
<p>全局字体设置</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#plt.colorbar字体更换</span></span><br><span class="line">[linux]<span class="comment"># cd /home/usrname/.cache/matplotlib</span></span><br><span class="line">[linux]<span class="comment"># vim fontlist-v310.json fontlist-v310.json</span></span><br><span class="line"><span class="comment"># 在ttflist中添加你想要的字体</span></span><br><span class="line">&#123;</span><br><span class="line">   <span class="string">"fname"</span>: <span class="string">"字体路径"</span>,</span><br><span class="line">   <span class="string">"name"</span>: <span class="string">"Times New Roman"</span>, <span class="comment">#调用时的字体名称</span></span><br><span class="line">   <span class="string">"style"</span>: <span class="string">"normal"</span>,</span><br><span class="line">   <span class="string">"variant"</span>: <span class="string">"normal"</span>,</span><br><span class="line">   <span class="string">"weight"</span>: 700,</span><br><span class="line">   <span class="string">"stretch"</span>: <span class="string">"normal"</span>,</span><br><span class="line">   <span class="string">"size"</span>: <span class="string">"scalable"</span>,</span><br><span class="line">   <span class="string">"__class__"</span>: <span class="string">"FontEntry"</span></span><br><span class="line"> &#125;,</span><br><span class="line">[linux]<span class="comment"># 在程序中设置plt的全局字体</span></span><br><span class="line"><span class="comment">##------.py Start------##</span></span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = <span class="string">'Times New Roman'</span></span><br><span class="line"><span class="comment">##------.py End------##</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>font</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下Anaconda及Tensorflow安装</title>
    <url>/2020/06/11/install_atk/</url>
    <content><![CDATA[<h1 id="CentOS7下深度学习环境配置（Anaconda-Tensorflow-Keras）"><a href="#CentOS7下深度学习环境配置（Anaconda-Tensorflow-Keras）" class="headerlink" title="CentOS7下深度学习环境配置（Anaconda+Tensorflow+Keras）#"></a>CentOS7下深度学习环境配置（Anaconda+Tensorflow+Keras）#</h1><h2 id="硬件信息查询"><a href="#硬件信息查询" class="headerlink" title="硬件信息查询"></a>硬件信息查询</h2><p>笔者的CPU和GPU型号分别如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cat /proc/cpuinfo |grep name|cut -f2 -d:|uniq -c <span class="comment">#查看CPU型号</span></span><br><span class="line"> 12  Intel(R) Xeon(R) E-2286G CPU @ 4.00GHz</span><br><span class="line">$ lspci | grep -i nvidia 查看连接的GPU设备</span><br><span class="line">01:00.0 VGA compatible controller: NVIDIA Corporation TU102 [GeForce RTX 2080 Ti Rev. A] (rev a1)</span><br><span class="line">01:00.1 Audio device: NVIDIA Corporation TU102 High Definition Audio Controller (rev a1)</span><br><span class="line">01:00.2 USB controller: NVIDIA Corporation TU102 USB 3.1 Host Controller (rev a1)</span><br><span class="line">01:00.3 Serial bus controller [0c80]: NVIDIA Corporation TU102 USB Type-C UCSI Controller (rev a1)</span><br><span class="line"><span class="comment">#如果CUDA和驱动已经安装完成并且～/.bashrc也配置完成则可以通过 nvidia-smi 查询驱动及GPU信息。</span></span><br><span class="line">$ nvidia-smi <span class="comment">#输出GPU运行状态及驱动版本</span></span><br><span class="line">Tue Jun  9 11:30:14 2020       </span><br><span class="line">+-----------------------------------------------------------------------------+</span><br><span class="line">| NVIDIA-SMI 440.82       Driver Version: 440.82       CUDA Version: 10.2     |</span><br><span class="line">|-------------------------------+----------------------+----------------------+</span><br><span class="line">| GPU  Name        Persistence-M| Bus-Id        Disp.A | Volatile Uncorr. ECC |</span><br><span class="line">| Fan  Temp  Perf  Pwr:Usage/Cap|         Memory-Usage | GPU-Util  Compute M. |</span><br><span class="line">|===============================+======================+======================|</span><br><span class="line">|   0  GeForce RTX 208...  Off  | 00000000:01:00.0  On |                  N/A |</span><br><span class="line">| 66%   84C    P2   233W / 250W |  10969MiB / 11016MiB |     91%      Default |</span><br><span class="line">+-------------------------------+----------------------+----------------------+</span><br></pre></td></tr></table></figure>
<p>另外，对于 <strong>CUDA</strong> 和 <strong>cuDNN</strong> 版本的查询可通过以下方式进行：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvcc --version <span class="comment">#查询cuda版本</span></span><br><span class="line">nvcc: NVIDIA (R) Cuda compiler driver</span><br><span class="line">Copyright (c) 2005-2018 NVIDIA Corporation</span><br><span class="line">Built on Sat_Aug_25_21:08:01_CDT_2018</span><br><span class="line">Cuda compilation tools, release 10.0, V10.0.130</span><br><span class="line"><span class="comment">#或者</span></span><br><span class="line">$ cat /usr/<span class="built_in">local</span>/cuda/version.txt</span><br><span class="line">CUDA Version 10.0.130</span><br><span class="line">$ cat /usr/<span class="built_in">local</span>/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 <span class="comment">#查询cudnn版本</span></span><br><span class="line"><span class="comment">#define CUDNN_MAJOR 7</span></span><br><span class="line"><span class="comment">#define CUDNN_MINOR 6</span></span><br><span class="line"><span class="comment">#define CUDNN_PATCHLEVEL 5</span></span><br><span class="line">--</span><br><span class="line"><span class="comment">#define CUDNN_VERSION (CUDNN_MAJOR * 1000 + CUDNN_MINOR * 100 + CUDNN_PATCHLEVEL)</span></span><br><span class="line"><span class="comment">#include "driver_types.h"</span></span><br></pre></td></tr></table></figure>

<h2 id="Anaconda-安装"><a href="#Anaconda-安装" class="headerlink" title="Anaconda 安装"></a>Anaconda 安装</h2><p>64位Linux的 <strong>Anacoda</strong> 安装包可以到<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/" target="_blank" rel="noopener">清华源</a>上下载，笔者下载安装的是5.3.1版本（<a href="https://mirrors.tuna.tsinghua.edu.cn/anaconda/archive/Anaconda3-5.3.1-Linux-x86_64.sh" target="_blank" rel="noopener">下载地址</a>），文件格式为 <strong>.sh</strong>，安装包下载完成后，我们进入到下载目录中，打开 <strong>terminal</strong> 并输入</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash Anaconda3-5.3.1-Linux-x86_64.sh -u <span class="comment"># -u可自定义安装目录</span></span><br><span class="line"><span class="comment">#进入安装后敲回车,直到出现界面并输入yes继续安装或者no退出安装:</span></span><br><span class="line">$ Please answer <span class="string">'yes'</span> or <span class="string">'no'</span>:<span class="string">'</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; yes</span></span><br><span class="line"><span class="string">Anaconda3 will now be installed into this location:</span></span><br><span class="line"><span class="string">/当前将要安装的目录</span></span><br><span class="line"><span class="string">  - Press ENTER to confirm the location</span></span><br><span class="line"><span class="string">  - Press CTRL-C to abort the installation</span></span><br><span class="line"><span class="string">  - Or specify a different location below</span></span><br><span class="line"><span class="string">[/home/wangsw/anaconda3] &gt;&gt;&gt; /此处输入你需要安装的目录</span></span><br><span class="line"><span class="string">#部分目录需要其它用户或者root权限，确认之后之后将会完成安装，最后会提示是否需要将Anaconda路径写入环境变量（推荐自动写入）以及是否需要使用VSCode（根据个人需要）：</span></span><br><span class="line"><span class="string">$ Do you wish the installer to initialize Anaconda3</span></span><br><span class="line"><span class="string">in your /root/.bashrc ? [yes|no]</span></span><br><span class="line"><span class="string">[no] &gt;&gt;&gt; no</span></span><br><span class="line"><span class="string">$ Do you wish to proceed with the installation of Microsoft VSCode? [yes|no]</span></span><br><span class="line"><span class="string">&gt;&gt;&gt; no</span></span><br><span class="line"><span class="string">#此时安装已经完成。</span></span><br></pre></td></tr></table></figure>

<h2 id="conda-环境创建"><a href="#conda-环境创建" class="headerlink" title="conda 环境创建"></a>conda 环境创建</h2><p>然后我们开始配置 <strong>conda</strong> 环境，不同 <strong>conda</strong> 环境可以安装不同 <strong>python</strong> 版本以及 <strong>tensorflow</strong> 等版本，其相当于一个容器，可用于不同需求的生产环境。为了加速 <strong>conda</strong> 环境配置过程，与安装完系统后进行相同的操作：更新下载源（可使用清华源、中科大源等）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda config --show <span class="comment">#输入后找到 channels 属性可查看已有下载源，若没有镜像源则执行以下命令</span></span><br><span class="line">$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge/</span><br><span class="line">$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line">$ conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/main/</span><br><span class="line">$ conda config --<span class="built_in">set</span> show_channel_urls yes <span class="comment">#该命令可允许下载时显示源地址</span></span><br><span class="line">$ conda clean -i <span class="comment">#清除索引缓存，保证用的是镜像站提供的索引。</span></span><br><span class="line">$ conda config --show <span class="comment">#查看是否源地址是否更新完成</span></span><br></pre></td></tr></table></figure>
<p>更新完源之后我们建立深度学习环境，首先创建一个特定 <strong>python</strong> 版本的 <strong>conda</strong> 环境：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda create -n env_name python=3.x <span class="comment">#env_name处输入自己想要建立的环境名称，x处填写需要的python版本，笔者为了保证原有代码的可移植性，使用python3.6版本</span></span><br><span class="line">  Solving environment: \ <span class="comment">#环境配置中，耐心等待即可</span></span><br><span class="line">  <span class="comment">## Package Plan ##</span></span><br><span class="line">  environment location: /xxxxxx/Anaconda/envs/env_name</span><br><span class="line">  added / updated specs: </span><br><span class="line">    - python=3.6</span><br><span class="line"> </span><br><span class="line">The following packages will be downloaded:</span><br><span class="line">    package                    |            build</span><br><span class="line">    ---------------------------|-----------------</span><br><span class="line">    certifi-2020.4.5.2         |   py36h9f0ad1d_0         152 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ld_impl_linux-64-2.34      |       h53a641e_5         616 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ca-certificates-2020.4.5.2 |       hecda079_0         147 KB  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ------------------------------------------------------------</span><br><span class="line">                                           Total:         914 KB</span><br><span class="line"></span><br><span class="line">The following NEW packages will be INSTALLED:</span><br><span class="line"></span><br><span class="line">    _libgcc_mutex:    0.1-conda_forge              https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    _openmp_mutex:    4.5-0_gnu                    https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ca-certificates:  2020.4.5.2-hecda079_0        https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    certifi:          2020.4.5.2-py36h9f0ad1d_0    https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ld_impl_linux-64: 2.34-h53a641e_5              https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    libffi:           3.2.1-he1b5a44_1007          https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    libgcc-ng:        9.2.0-h24d8f2e_2             https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    libgomp:          9.2.0-h24d8f2e_2             https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    libstdcxx-ng:     9.2.0-hdf63c60_2             https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    ncurses:          6.1-hf484d3e_1002            https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    openssl:          1.1.1g-h516909a_0            https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    pip:              20.1.1-py_1                  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    python:           3.6.10-h8356626_1011_cpython https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    python_abi:       3.6-1_cp36m                  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    readline:         8.0-hf8c457e_0               https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    setuptools:       47.1.1-py36h9f0ad1d_0        https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    sqlite:           3.30.1-hcee41ef_0            https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    tk:               8.6.10-hed695b0_0            https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    wheel:            0.34.2-py_1                  https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    xz:               5.2.5-h516909a_0             https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line">    zlib:             1.2.11-h516909a_1006         https://mirrors.tuna.tsinghua.edu.cn/anaconda/cloud/conda-forge</span><br><span class="line"></span><br><span class="line">Proceed ([y]/n)? <span class="comment">#输入y即可，可以看到安装包均从上文中配置的地址中下载</span></span><br><span class="line"></span><br><span class="line">Downloading and Extracting Packages</span><br><span class="line">ca-certificates-2020 | 147 KB    | <span class="comment">##################################### | 100% </span></span><br><span class="line">certifi-2020.4.5.2   | 152 KB    | <span class="comment">##################################### | 100% </span></span><br><span class="line">ld_impl_linux-64-2.3 | 616 KB    | <span class="comment">##################################### | 100% </span></span><br><span class="line">Preparing transaction: <span class="keyword">done</span></span><br><span class="line">Verifying transaction: <span class="keyword">done</span></span><br><span class="line">Executing transaction: <span class="keyword">done</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To activate this environment, use:</span></span><br><span class="line"><span class="comment"># &gt; source activate env_name</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># To deactivate an active environment, use:</span></span><br><span class="line"><span class="comment"># &gt; source deactivate</span></span><br><span class="line"><span class="comment">#</span></span><br></pre></td></tr></table></figure>
<p>安装完成后，我们可以通过 <code>$ source activate env_name</code>来打开创建好的环境，<code>pip list</code>可查看当前环境下已经安装的轮子，<code>pip show [package_name]</code>可以查看轮子的版本等信息（输入时去掉中括号）。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(env_name)[root]$ pip list <span class="comment">#查看已安装轮子</span></span><br><span class="line">Package    Version</span><br><span class="line">---------- -------------------</span><br><span class="line">certifi    2020.4.5.2</span><br><span class="line">pip        20.1.1</span><br><span class="line">setuptools 47.1.1.post20200529</span><br><span class="line">wheel      0.34.2</span><br><span class="line">(env_name)[root]$ pip show certifi <span class="comment">#查看轮子信息</span></span><br><span class="line">Name: certifi</span><br><span class="line">Version: 2020.4.5.2</span><br><span class="line">Summary: Python package <span class="keyword">for</span> providing Mozilla<span class="string">'s CA Bundle.</span></span><br><span class="line"><span class="string">Home-page: https://certifiio.readthedocs.io/en/latest/</span></span><br><span class="line"><span class="string">Author: Kenneth Reitz</span></span><br><span class="line"><span class="string">Author-email: me@kennethreitz.com</span></span><br><span class="line"><span class="string">License: MPL-2.0</span></span><br><span class="line"><span class="string">Location: /..../Anaconda/envs/test/lib/python3.6/site-packages</span></span><br><span class="line"><span class="string">Requires: </span></span><br><span class="line"><span class="string">Required-by:</span></span><br></pre></td></tr></table></figure>
<p>同样的，为了加速 <strong>conda</strong> 环境内 <strong>pip</strong> 下载的速度我们首先更换下载源：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">(env_name)[root]$ pip config <span class="built_in">set</span> global.index-url https://pypi.tuna.tsinghua.edu.cn/simple</span><br><span class="line">Writing to /..../.config/pip/pip.conf</span><br></pre></td></tr></table></figure>
<p>之后，可通过 <code>$pip install package</code> 的命令下载和安装轮子了（如果没有配置下载源的话，可以通过<code>$ pip install package -i https://pypi.tuna.tsinghua.edu.cn/simple</code>的方式临时使用 <strong>url</strong> 下载）。需要注意的是，该环境下安装的包只能在环境内使用，这也允许我们能够使用多个版本的生产环境，只需要<code>$ source activate env_name</code>即可。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#笔者使用的生产环境之一为：</span></span><br><span class="line">(env_name)[root]$ pip install tensorflow-gpu==1.14.0</span><br><span class="line">(env_name)[root]$ pip install keras==2.2.5</span><br><span class="line">(env_name)[root]$ pip install numpy==1.16.0</span><br><span class="line">(env_name)[root]$ <span class="built_in">source</span> deactivate <span class="comment">#退出已打开的环境env_name</span></span><br></pre></td></tr></table></figure>
<h2 id="conda-常用命令"><a href="#conda-常用命令" class="headerlink" title="conda 常用命令"></a>conda 常用命令</h2><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ conda --version <span class="comment">#查看conda版本</span></span><br><span class="line">$ conda creat -n your_env_name python==3.x <span class="comment">#创建python版本为3.x的conda环境</span></span><br><span class="line">$ conda remove --name your_env_name –all <span class="comment">#删除已创建环境</span></span><br><span class="line">$ conda create --name new_env --<span class="built_in">clone</span> old_env <span class="comment">#创建新conda环境new_env并将old_env环境复制到前者中</span></span><br><span class="line">$ <span class="built_in">source</span> activate your_env_name <span class="comment">#激活已创建环境</span></span><br><span class="line">$ <span class="built_in">source</span> deactivate <span class="comment">#退出当前窗口中已激活环境</span></span><br><span class="line">$ conda info -e  <span class="comment">#查询已安装环境</span></span><br><span class="line">$ conda install --name your_env_name package_name <span class="comment">#在指定环境your_env_name中安装package_name包（例如conda install my_env tensorflow-gpu==2.0.0）</span></span><br><span class="line">$ conda update conda <span class="comment">#（不推荐）将conda更新至最新版本，但也会更新其它相关包</span></span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>深度学习环境配置</tag>
      </tags>
  </entry>
  <entry>
    <title>CentOS下CUDA及cuDNN安装</title>
    <url>/2020/06/10/install_cudacudnn/</url>
    <content><![CDATA[<h1 id="工作站CentOS-7下CUDA驱动及cuDNN安装"><a href="#工作站CentOS-7下CUDA驱动及cuDNN安装" class="headerlink" title="工作站CentOS-7下CUDA驱动及cuDNN安装"></a>工作站CentOS-7下CUDA驱动及cuDNN安装</h1><h2 id="安装包选择及下载"><a href="#安装包选择及下载" class="headerlink" title="安装包选择及下载"></a>安装包选择及下载</h2><ul>
<li><strong>Nvidia驱动下载：</strong> 一般不使用 <strong>CUDA</strong> 安装包中的驱动程序，而是到<a href="https://www.nvidia.cn/Download/index.aspx?lang=cn" target="_blank" rel="noopener">官方网站</a>根据 GPU 型号下载对应驱动，这里我们选择与 <strong>RTX2080Ti</strong> 对应的<a href="http://cn.download.nvidia.com/XFree86/Linux-x86_64/440.82/NVIDIA-Linux-x86_64-440.82.run" target="_blank" rel="noopener">440.82-Linux 64-bit</a>版本，笔者首先安装的驱动，然后才装的 <strong>CUDA-10.0</strong> ，理论上二者先后顺序没有强制性。若先装 <strong>CUDA</strong> 的话记住<strong>不要不要不要不要安装自带的驱动程序</strong>，否则<strong>可能会出现重启后黑屏无法进入系统等问题</strong>。<strong>Ubuntu</strong> 中一般能够通过命令行操作删除驱动和 <strong>CUDA</strong>，但在 <strong>CentOS</strong> 系统中可能会导致无法进入终端命令行字符界面，完全黑屏时最粗暴的处理办法就是重装系统，<strong>grub</strong> 中的操作方式笔者没有研究过。当然了，如果先装驱动程序后装 <strong>CUDA</strong> ，自带的驱动自然也是不需要安装的。</li>
<li><strong>CUDA Toolkit</strong> 下载：版本根据实际需要进行选择，笔者最开始接触的GPU并行编程语言的时候就已经是 <strong>v10.0</strong> 了(现在最新版本为 <strong><a href="https://developer.nvidia.com/cuda-downloads?target_os=Linux" target="_blank" rel="noopener">CUDA11</a></strong>)，本机器上安装的 <strong><a href="https://developer.nvidia.com/compute/cuda/10.0/Prod/local_installers/cuda-repo-rhel7-10-0-local-10.0.130-410.48-1.0-1.x86_64" target="_blank" rel="noopener">CUDA_10.0.130</a></strong>（<a href="https://developer.nvidia.com/cuda-toolkit-archive" target="_blank" rel="noopener">历史版本 <strong>CUDA</strong> 下载地址</a>）</li>
<li><strong>cuDNN下载</strong>：下载 <strong>cuDNN</strong> 前要先注册一个 <strong>Nvidia</strong> 账户，忘记密码的话通过官方渠道申请修改密码可能会遇到无法收到邮件的问题，这一问题暂时没有好的解决办法；如果没有账户的话直接注册一个即可，（注册账户的邮件能收到，修改密码的经常收不到，同时我们注意到官方开通了微信或者QQ登陆方式，但是我打不开。。。），<strong>cuDNN</strong> 版本与 <strong>CUDA</strong> 版本要对应上，这里笔者使用的是与 <strong>CUDA10.0</strong>对应的 <strong>cuDNN7</strong> (cudnn-10.0-linux-x64-v7.6.5.32，没有链接，刚改了密码又忘了登不上去了= =)。</li>
</ul>
<table>
<thead>
<tr>
<th>CUDA Toolkit</th>
<th>Linuxx86_64驱动版本</th>
<th>Windowsx86_64驱动版本</th>
</tr>
</thead>
<tbody><tr>
<td>CUDA 10.2.89</td>
<td>&gt;= 440.33</td>
<td>&gt;= 441.22</td>
</tr>
<tr>
<td>CUDA 10.1 (10.1.105 general release, and updates)</td>
<td>&gt;= 418.39</td>
<td>&gt;= 418.96</td>
</tr>
<tr>
<td>CUDA 10.0.130</td>
<td>&gt;= 410.48</td>
<td>&gt;= 411.31</td>
</tr>
<tr>
<td>CUDA 9.2 (9.2.148 Update 1)</td>
<td>&gt;= 396.37</td>
<td>&gt;= 398.26</td>
</tr>
<tr>
<td>CUDA 9.2 (9.2.88)</td>
<td>&gt;= 396.26</td>
<td>&gt;= 397.44</td>
</tr>
<tr>
<td>CUDA 9.1 (9.1.85)</td>
<td>&gt;= 390.46</td>
<td>&gt;= 391.29</td>
</tr>
<tr>
<td>CUDA 9.0 (9.0.76)</td>
<td>&gt;= 384.81</td>
<td>&gt;= 385.54</td>
</tr>
<tr>
<td>CUDA 8.0 (8.0.61 GA2)</td>
<td>&gt;= 375.26</td>
<td>&gt;= 376.51</td>
</tr>
<tr>
<td>CUDA 8.0 (8.0.44)</td>
<td>&gt;= 367.48</td>
<td>&gt;= 369.30</td>
</tr>
</tbody></table>
<h2 id="安装过程"><a href="#安装过程" class="headerlink" title="安装过程"></a>安装过程</h2><p>在准备好以下三个文件后就可以开始安装了（最好先把它们都下载下来放到U盘里，做好多次重装系统的准备）</p>
 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ cuda_10.0.130_410.48_linux.run <span class="comment">#CUDA Toolkit</span></span><br><span class="line">$ cudnn-10.0-linux-x64-v7.6.5.32.tgz <span class="comment">#cuDNN for CUDA10</span></span><br><span class="line">$ NVIDIA-Linux-x86_64-440.82.run <span class="comment">#Nvidia-driver for RTX2080Ti</span></span><br></pre></td></tr></table></figure>

<ul>
<li><strong>Nvidia 驱动及CUDA安装</strong></li>
</ul>
<p>首先查看是否开启了默认的 <strong>nouveau</strong> 驱动，如果输入<code>lsmod | grep nouveau</code> 没有任何提示的话则已经关闭了该驱动，若有提示，则需要首先禁用该驱动:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ cp /etc/modprobe.d/blacklist.conf /etc/modprobe.d/blacklist.conf.back <span class="comment">#备份原有黑名单(如果提示没有此文件的话可以在该目录下创建一个新的同名文件，然后再进行后续操作)</span></span><br><span class="line">[root]$ <span class="built_in">echo</span> -e <span class="string">"blacklist nouveau\noptions nouveau modeset=0"</span> &gt; /etc/modprobe.d/blacklist.conf <span class="comment">#禁用nouveau驱动</span></span><br><span class="line">[root]$ mv /boot/initramfs-$(uname -r).img /boot/initramfs-$(uname -r).img.back <span class="comment">#备份initramfs</span></span><br><span class="line">[root]$ dracut /boot/initramfs-$(uname -r).img $(uname -r) --force <span class="comment">#重建initramfs</span></span><br><span class="line">[root]$ init 6 <span class="comment">#重启</span></span><br><span class="line">[root]$ <span class="built_in">cd</span> /../../ <span class="comment">#切换到驱动所在目录</span></span><br><span class="line">[root]$ sh ./NVIDIA-Linux-x86_64-440.82.run <span class="comment">#执行安装过程(安装如果卡在Verifying archive integrity... Error in check sums 00000000 000000,重新到官网上选择自己显卡型号的驱动下载再次安装即可)</span></span><br><span class="line">[root]$ nvidia-smi <span class="comment">#查看驱动是否安装成功，若顺利输出GPU信息则成功，或者切换到Toolkit的Samples中编译并运行带着的例子，显示Result=PASS则能够顺利运行CUDA程序。</span></span><br><span class="line">[root]$ sh ./cuda_10.0.130_410.48_linux.run <span class="comment">#安装CUDA Toolkit，记住不要安装里面带着的驱动</span></span><br><span class="line">[root]$ reboot <span class="comment">#安装完成重启，顺利进入图形界面～</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>cuDNN</strong>安装</li>
</ul>
<p>话不多说直接上代码</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ <span class="built_in">cd</span> /../../ <span class="comment">#切换到cuDNN安装包所在目录</span></span><br><span class="line">[root]$ tar -xzvf cudnn-10.0-linux-x64-v7.6.5.32.tgz <span class="comment">#解压cudnn到当前文件夹</span></span><br><span class="line">[root]$ cp cuda/include/cudnn.h /usr/<span class="built_in">local</span>/cuda-10.0/include/</span><br><span class="line">[root]$ cp cuda/lib64/libcudnn* /usr/<span class="built_in">local</span>/cuda/lib64/</span><br><span class="line">[root]$ chmod a+r /usr/<span class="built_in">local</span>/cuda-10.0/include/cudnn.h /usr/<span class="built_in">local</span>/cuda/lib64/libcudnn*</span><br><span class="line"><span class="comment">#以下两步为解决tensorflow运行中找不到链接文件的问题，如果CUDA版本不同请自主更改系统路径</span></span><br><span class="line">[root]$ cp /usr/<span class="built_in">local</span>/cuda-10.0/lib64/libcublas.so.10.0 /usr/<span class="built_in">local</span>/lib/libcublas.so.10.0 &amp;&amp; sudo ldconfig</span><br><span class="line">[root]$ cp /usr/<span class="built_in">local</span>/cuda-10.0/lib64/libcufft.so.10.0 /usr/<span class="built_in">local</span>/lib/libcufft.so.10.0 &amp;&amp; sudo ldconfig</span><br><span class="line">[username]$ vim ~/.bashrc <span class="comment">#个人账户下CUDA相关环境变量的配置</span></span><br><span class="line"><span class="comment">#--------------------------------------------------#</span></span><br><span class="line">CUDA_HOME=/usr/<span class="built_in">local</span>/cuda-10.0</span><br><span class="line">PATH=<span class="variable">$PATH</span>:/usr/<span class="built_in">local</span>/cuda-10.0/bin</span><br><span class="line">LD_LIBRARY_PATH=/usr/<span class="built_in">local</span>/cuda-10.0/lib64</span><br><span class="line"><span class="built_in">export</span> CUDA_HOME PATH LD_LIBRARY_PATH</span><br><span class="line"><span class="comment">#--------------------------------------------------#</span></span><br><span class="line">[username]$ <span class="built_in">source</span> ~/.bashrc <span class="comment">#配置完成后立即更新环境变量</span></span><br></pre></td></tr></table></figure>
<ul>
<li>查看是否安装成功</li>
</ul>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ nvcc --version <span class="comment">#查看编译器及CUDA版本</span></span><br><span class="line">[root]$ nvidia-smi <span class="comment">#查看GPU信息、驱动版本</span></span><br><span class="line">[root]$ cat /usr/<span class="built_in">local</span>/cuda/include/cudnn.h | grep CUDNN_MAJOR -A 2 <span class="comment">#查看cuDNN版本</span></span><br></pre></td></tr></table></figure>
<h2 id="进阶设置"><a href="#进阶设置" class="headerlink" title="进阶设置"></a>进阶设置</h2><h3 id="1-安装温度监控器"><a href="#1-安装温度监控器" class="headerlink" title="1.  安装温度监控器"></a>1.  安装温度监控器</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ yum install lm_sensors <span class="comment">#下载安装lm_sensors插件</span></span><br><span class="line">[root]$ /usr/sbin/sensors-detect <span class="comment">#运行sensors-detect配置程序</span></span><br><span class="line">[notroot]$ sensors <span class="comment">#查看已允许检测设备的当前状态</span></span><br></pre></td></tr></table></figure>
<h3 id="2-手动控制-GPU-风扇转速"><a href="#2-手动控制-GPU-风扇转速" class="headerlink" title="2. 手动控制 GPU 风扇转速"></a>2. 手动控制 <strong>GPU</strong> 风扇转速</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">[root]$ cp /etc/X11/xorg.conf /etc/X11/xorg.conf.back <span class="comment">#备份原有xorg配置文件</span></span><br><span class="line">[root]$ vim xorg.conf</span><br><span class="line"><span class="comment">#-----------File Start--------------#</span></span><br><span class="line">Section <span class="string">"Device"</span></span><br><span class="line">       Identifier  <span class="string">"Videocard0"</span></span><br><span class="line">       Driver      <span class="string">"nvidia"</span></span><br><span class="line">       Option <span class="string">"Coolbits"</span> <span class="string">"4"</span> <span class="comment">#增加该行内容后重启，可在Applications-other-Nvidia X Server Settings-GPU-Thermal Settings</span></span><br><span class="line">EndSection</span><br><span class="line"><span class="comment">#-----------File End--------------#</span></span><br><span class="line">[root]$ nvidia-settings -a <span class="string">"[gpu:0]/GPUFanControlState=0"</span> <span class="comment">#恢复GPU转速随温度控制</span></span><br></pre></td></tr></table></figure>
<h3 id="3-常用-GPU-相关命令"><a href="#3-常用-GPU-相关命令" class="headerlink" title="3. 常用 GPU 相关命令"></a>3. 常用 GPU 相关命令</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ nvidia-smi -L <span class="comment">#列出所有可使用的GPU设备</span></span><br><span class="line">$ nvidia-smi -l <span class="comment">#与nvidia-smi功能相同但带有自动刷新功能（不清空输出缓存区）</span></span><br><span class="line">$ nvidia-smi -q <span class="comment">#查看所有GPU设备信息</span></span><br><span class="line">$ nvidia-smi –pm 0/1 <span class="comment">#设置持久模式：0/DISABLED,1/ENABLED</span></span><br><span class="line">$ nvidia-smi –e 0/1 <span class="comment">#切换ECC支持：0/DISABLED, 1/ENABLED</span></span><br><span class="line">$ nvidia-smi –p 0/1 <span class="comment">#重置ECC错误计数：0/VOLATILE, 1/AGGREGATE</span></span><br><span class="line">$ nvidia-smi –c <span class="comment">#设置计算应用模式：0/DEFAULT,1/EXCLUSIVE_PROCESS,2/PROHIBITED</span></span><br><span class="line">$ nvidia-smi –r <span class="comment">#GPU复位</span></span><br><span class="line">$ nvidia-smi –vm <span class="comment">#设置GPU虚拟化模式</span></span><br><span class="line">$ nvidia-smi –ac xxx,xxx <span class="comment">#设置GPU运行的工作频率。e.g. nvidia-smi –ac2000,800</span></span><br><span class="line">$ nvidia-smi –rac <span class="comment">#0/1 将时钟频率重置为默认值</span></span><br><span class="line">$ nvidia-smi –acp <span class="comment">#切换-ac和-rac的权限要求，0/UNRESTRICTED, 1/RESTRICTED</span></span><br><span class="line">$ nvidia-smi –pl <span class="comment">#指定最大电源管理限制（瓦特）</span></span><br><span class="line">$ nvidia-smi –am 0/1 <span class="comment">#启用或禁用计数模式，0/DISABLED,1/ENABLED</span></span><br><span class="line">$ nvidia-smi –caa <span class="comment">#清除缓冲区中的所有已记录PID，0/DISABLED,1/ENABLED</span></span><br></pre></td></tr></table></figure>
<h3 id="4-动态监控"><a href="#4-动态监控" class="headerlink" title="4. 动态监控"></a>4. 动态监控</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#实际上，可以使用watch命令实现动态监控(不需要root权限)</span></span><br><span class="line">$ watch -n 1 sensors <span class="comment"># 1表示每隔一秒刷新sensors</span></span><br><span class="line">$ watch -n 1 nvidia-smi <span class="comment">#同理可动态监控GPU运行状态，以判断Tensorfow是否正确使用了GPU运行</span></span><br></pre></td></tr></table></figure>




]]></content>
      <categories>
        <category>装机</category>
      </categories>
      <tags>
        <tag>CUDA及cuDNN下载与安装</tag>
      </tags>
  </entry>
  <entry>
    <title>styleGAN源码解读之pretrained-example.py</title>
    <url>/2020/07/07/styleGAN-pretrained-example/</url>
    <content><![CDATA[<h1 id="styleGAN—pretrained-example-py"><a href="#styleGAN—pretrained-example-py" class="headerlink" title="styleGAN—pretrained-example.py"></a>styleGAN—pretrained-example.py</h1><p>此代码使用预训练的styleGAN模型<a href="https://pan.baidu.com/s/15eBihbZvLZ42aToLy5iKlQ" target="_blank" rel="noopener">karras2019stylegan-ffhq-1024x1024.pkl(百度网盘，密码1q60)</a>生成器生成单张随机人脸图像。</p>
<h1 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> PIL.Image</span><br><span class="line"><span class="keyword">import</span> dnnlib</span><br><span class="line"><span class="keyword">import</span> dnnlib.tflib <span class="keyword">as</span> tflib</span><br><span class="line"><span class="keyword">import</span> config</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># Initialize TensorFlow.</span></span><br><span class="line">    tflib.init_tf()</span><br><span class="line">    <span class="comment"># Load pre-trained network.</span></span><br><span class="line">    url = <span class="string">'https://drive.google.com/uc?id=1MEGjdvVpUsu1jB4zrXZN7Y4kBBOzizDQ'</span> <span class="comment"># karras2019stylegan-ffhq-1024x1024.pkl</span></span><br><span class="line">    <span class="keyword">with</span> dnnlib.util.open_url(url, cache_dir=config.cache_dir) <span class="keyword">as</span> f:</span><br><span class="line">        _G, _D, Gs = pickle.load(f)</span><br><span class="line">        <span class="comment"># _G = Instantaneous snapshot of the generator. Mainly useful for resuming a previous training run.</span></span><br><span class="line">        <span class="comment"># _D = Instantaneous snapshot of the discriminator. Mainly useful for resuming a previous training run.</span></span><br><span class="line">        <span class="comment"># Gs = Long-term average of the generator. Yields higher-quality results than the instantaneous snapshot.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Print network details.</span></span><br><span class="line">    <span class="comment">#Gs.print_layers()</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># Pick latent vector.</span></span><br><span class="line">    rnd = np.random.RandomState(<span class="number">5</span>)</span><br><span class="line">    latents = rnd.randn(<span class="number">1</span>, Gs.input_shape[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># Generate image.</span></span><br><span class="line">    fmt = dict(func=tflib.convert_images_to_uint8, nchw_to_nhwc=<span class="literal">True</span>)</span><br><span class="line">    images = Gs.run(latents, <span class="literal">None</span>, truncation_psi=<span class="number">0.7</span>, randomize_noise=<span class="literal">True</span>, output_transform=fmt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># Save image.</span></span><br><span class="line">    os.makedirs(config.result_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    png_filename = os.path.join(config.result_dir, <span class="string">'example.png'</span>)</span><br><span class="line">    PIL.Image.fromarray(images[<span class="number">0</span>], <span class="string">'RGB'</span>).save(png_filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h1 id="微调预训练模型路径后的代码"><a href="#微调预训练模型路径后的代码" class="headerlink" title="微调预训练模型路径后的代码"></a>微调预训练模型路径后的代码</h1><p>由于代码中所使用的预训练模型存储在GoogleDrive上可能无法通过代码下载，因此我们提前下载下来并从本地读取。这里修改代码为：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#这段代码运行在styleGAN根目录下的./ipynb/sytle_test.ipynb中</span></span><br><span class="line"><span class="keyword">import</span> os <span class="comment">#module 'os' from '/xxx/Anaconda/envs/xxx/lib/python3.6/os.py'</span></span><br><span class="line"><span class="keyword">import</span> pickle <span class="comment"># module 'pickle' from '/xxx/Anaconda/envs/xxx/lib/python3.x/pickle.py'</span></span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np <span class="comment">#略</span></span><br><span class="line"><span class="keyword">import</span> PIL.Image <span class="comment">#略</span></span><br><span class="line"><span class="keyword">import</span> dnnlib <span class="comment"># ./dnnlib</span></span><br><span class="line"><span class="keyword">import</span> dnnlib.tflib <span class="keyword">as</span> tflib <span class="comment"># module 'dnnlib.tflib' from '../dnnlib/tflib/__init__.py'</span></span><br><span class="line"><span class="keyword">import</span> config <span class="comment"># &lt;module 'config' from '../config.py'&gt;</span></span><br><span class="line"><span class="keyword">import</span> sys <span class="comment"># module 'sys' (built-in)</span></span><br><span class="line"><span class="comment">#输入print(module_name)可查看其文件位置()</span></span><br><span class="line"><span class="comment">#例如</span></span><br><span class="line"><span class="comment">#print(dnnlib)</span></span><br><span class="line"><span class="comment">#&lt;module 'dnnlib' from '../dnnlib/__init__.py'&gt;</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">()</span>:</span></span><br><span class="line">    <span class="comment"># 初始化Tensorflow.</span></span><br><span class="line">    tflib.init_tf()</span><br><span class="line">    <span class="comment"># 加载pkl文件，重构对象并导入预训练模型</span></span><br><span class="line">    url = <span class="string">r'/xxx/xxx/xxx/karras2019stylegan-ffhq-1024x1024.pkl'</span></span><br><span class="line">    <span class="keyword">with</span> open(url, <span class="string">'rb'</span>) <span class="keyword">as</span> f:</span><br><span class="line">        _G, _D, Gs = pickle.load(f)</span><br><span class="line">        <span class="comment"># _G = Instantaneous snapshot of the generator. Mainly useful for resuming a previous training run.</span></span><br><span class="line">        <span class="comment"># _D = Instantaneous snapshot of the discriminator. Mainly useful for resuming a previous training run.</span></span><br><span class="line">        <span class="comment"># Gs = Long-term average of the generator. Yields higher-quality results than the instantaneous snapshot.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># 打印Gs网络架构，相当于tf中的.summary()，函数原型位于network.py中，是作者自定义的函数。</span></span><br><span class="line">    Gs.print_layers()</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 随机生成latent.</span></span><br><span class="line">    rnd = np.random.RandomState(<span class="number">5</span>)</span><br><span class="line">    latents = rnd.randn(<span class="number">1</span>, Gs.input_shape[<span class="number">1</span>])</span><br><span class="line">    <span class="comment"># 生成图像.</span></span><br><span class="line">    fmt = dict(func=tflib.convert_images_to_uint8, nchw_to_nhwc=<span class="literal">True</span>)</span><br><span class="line">    images = Gs.run(latents, <span class="literal">None</span>, truncation_psi=<span class="number">0.7</span>, randomize_noise=<span class="literal">True</span>, output_transform=fmt)</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 保存图像.</span></span><br><span class="line">    os.makedirs(config.result_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">    png_filename = os.path.join(config.result_dir, <span class="string">'example.png'</span>)</span><br><span class="line">    PIL.Image.fromarray(images[<span class="number">0</span>], <span class="string">'RGB'</span>).save(png_filename)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">"__main__"</span>:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure>

<h1 id="函数逐行分析"><a href="#函数逐行分析" class="headerlink" title="函数逐行分析"></a>函数逐行分析</h1><h2 id="tflib-init-tf"><a href="#tflib-init-tf" class="headerlink" title="tflib.init_tf()"></a>tflib.init_tf()</h2><p><strong>main</strong>函数中第一句<code>tflib.init_tf()</code>函数用于初始化<strong>tensorflow</strong>，此函数位于<strong>dnnlib/tflib/tfutil.py</strong>中,<code>init_tf()</code>所依赖的其它函数有<code>_sanitize_tf_config</code>和<code>create_session</code>,这两个函数同样位于此文件中。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 本机环境为tenforlow-gpu1.14.0,运行源代码过程中经常提示版本相关的warning</span></span><br><span class="line"><span class="comment"># 所以这里使用tensorflow.compat.v1来运行</span></span><br><span class="line"><span class="keyword">import</span> tensorflow.compat.v1 <span class="keyword">as</span> tf</span><br><span class="line"><span class="comment">#--- 初始化TF</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">init_tf</span><span class="params">(config_dict: dict = None)</span> -&gt; <span class="keyword">None</span>:</span></span><br><span class="line">    <span class="string">"""Initialize TensorFlow session using good default settings."""</span></span><br><span class="line">    <span class="comment"># 如果已创建Seccion则退出该函数.</span></span><br><span class="line">    <span class="keyword">if</span> tf.get_default_session() <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">	</span><br><span class="line">	<span class="comment"># 调用_sanitize_tf_config</span></span><br><span class="line">    <span class="comment"># 设置配置字典和随机种子.</span></span><br><span class="line">    cfg = _sanitize_tf_config(config_dict)</span><br><span class="line">    np_random_seed = cfg[<span class="string">"rnd.np_random_seed"</span>]</span><br><span class="line">    <span class="keyword">if</span> np_random_seed <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        np.random.seed(np_random_seed)</span><br><span class="line">    tf_random_seed = cfg[<span class="string">"rnd.tf_random_seed"</span>]</span><br><span class="line">    <span class="keyword">if</span> tf_random_seed == <span class="string">"auto"</span>:</span><br><span class="line">        tf_random_seed = np.random.randint(<span class="number">1</span> &lt;&lt; <span class="number">31</span>)</span><br><span class="line">    <span class="keyword">if</span> tf_random_seed <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        tf.set_random_seed(tf_random_seed)</span><br><span class="line">	</span><br><span class="line">    <span class="comment"># 设置TF环境变量.</span></span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> list(cfg.items()):</span><br><span class="line">        fields = key.split(<span class="string">"."</span>)</span><br><span class="line">        <span class="keyword">if</span> fields[<span class="number">0</span>] == <span class="string">"env"</span>:</span><br><span class="line">            <span class="keyword">assert</span> len(fields) == <span class="number">2</span></span><br><span class="line">            os.environ[fields[<span class="number">1</span>]] = str(value)</span><br><span class="line">            </span><br><span class="line">	<span class="comment"># 调用create_session</span></span><br><span class="line">    <span class="comment"># 创建TF会话.</span></span><br><span class="line">    create_session(cfg, force_as_default=<span class="literal">True</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment">#--- 设置配置信息</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">_sanitize_tf_config</span><span class="params">(config_dict: dict = None)</span> -&gt; dict:</span></span><br><span class="line">    <span class="comment"># Defaults.</span></span><br><span class="line">    cfg = dict()</span><br><span class="line">    cfg[<span class="string">"rnd.np_random_seed"</span>]               = <span class="literal">None</span>      <span class="comment"># Random seed for NumPy. None = keep as is.</span></span><br><span class="line">    cfg[<span class="string">"rnd.tf_random_seed"</span>]               = <span class="string">"auto"</span>    <span class="comment"># Random seed for TensorFlow. 'auto' = derive from NumPy random state. None = keep as is.</span></span><br><span class="line">    cfg[<span class="string">"env.TF_CPP_MIN_LOG_LEVEL"</span>]         = <span class="string">"1"</span>       <span class="comment"># 0 = Print all available debug info from TensorFlow. 1 = Print warnings and errors, but disable debug info.</span></span><br><span class="line">    cfg[<span class="string">"graph_options.place_pruned_graph"</span>] = <span class="literal">True</span>      <span class="comment"># False = Check that all ops are available on the designated device. True = Skip the check for ops that are not used.</span></span><br><span class="line">    cfg[<span class="string">"gpu_options.allow_growth"</span>]         = <span class="literal">True</span>      <span class="comment"># False = Allocate all GPU memory at the beginning. True = Allocate only as much GPU memory as needed.</span></span><br><span class="line"></span><br><span class="line">    <span class="comment"># User overrides.</span></span><br><span class="line">    <span class="keyword">if</span> config_dict <span class="keyword">is</span> <span class="keyword">not</span> <span class="literal">None</span>:</span><br><span class="line">        cfg.update(config_dict)</span><br><span class="line">    <span class="keyword">return</span> cfg</span><br><span class="line">    </span><br><span class="line"><span class="comment">#--- 根据配置信息创建会话</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">create_session</span><span class="params">(config_dict: dict = None, force_as_default: bool = False)</span> -&gt; tf.Session:</span></span><br><span class="line">    <span class="comment"># """根据config_dict创建tf.Session."""</span></span><br><span class="line">    <span class="comment"># 设置TF配置属性.</span></span><br><span class="line">    cfg = _sanitize_tf_config(config_dict)</span><br><span class="line">    config_proto = tf.ConfigProto()</span><br><span class="line">    <span class="keyword">for</span> key, value <span class="keyword">in</span> cfg.items():</span><br><span class="line">        fields = key.split(<span class="string">"."</span>)</span><br><span class="line">        <span class="keyword">if</span> fields[<span class="number">0</span>] <span class="keyword">not</span> <span class="keyword">in</span> [<span class="string">"rnd"</span>, <span class="string">"env"</span>]:</span><br><span class="line">            obj = config_proto</span><br><span class="line">            <span class="keyword">for</span> field <span class="keyword">in</span> fields[:<span class="number">-1</span>]:</span><br><span class="line">                obj = getattr(obj, field)</span><br><span class="line">            setattr(obj, fields[<span class="number">-1</span>], value)</span><br><span class="line">    <span class="comment"># 创建会话.</span></span><br><span class="line">    session = tf.Session(config=config_proto)</span><br><span class="line">    <span class="keyword">if</span> force_as_default:</span><br><span class="line">        <span class="comment"># pylint: disable=protected-access</span></span><br><span class="line">        <span class="comment"># 将自己设置为default session</span></span><br><span class="line">        session._default_session = session.as_default()</span><br><span class="line">        session._default_session.enforce_nesting = <span class="literal">False</span></span><br><span class="line">        session._default_session.__enter__() <span class="comment"># pylint: disable=no-member</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> session</span><br></pre></td></tr></table></figure>

<p>以上函数中，<code>def init_tf(config_dict:dict=None)-&gt;None</code>定义了名为<strong>init_tf</strong>的函数：该函数接受名为<strong>config_dict</strong>的变量，<code>config_dict:dict=None</code>表示<strong>config_dict</strong>的期望类型为字典以及初始值为<strong>None</strong>；其中的冒号<code>:</code>是一种<strong>Type Annotation</strong>，其用于提示变量的类型为<code>dict</code>；<code>-&gt;</code>用于注释函数的返回类型为<strong>None</strong>。</p>
<p><code>if tf.get_default_session() is not None: return</code>用于获取当前会话(Session)，如果会话不为空则退出<code>init_tf</code>，若未创建会话则执行后续代码。</p>
<p><code>cfg=_sanitize_tf_config(config_dict)</code>调用了<code>_sanitize_tf_config</code>函数，此函数中创建了一个参数字典，我们可以通过以下方式打印其中的值：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> key, value <span class="keyword">in</span> zip(cfg.keys(), cfg.values()):</span><br><span class="line">        print(key, <span class="string">':'</span>, value)</span><br><span class="line"><span class="comment">###--------结果如下--------###</span></span><br><span class="line">rnd.np_random_seed : <span class="literal">None</span></span><br><span class="line">rnd.tf_random_seed : auto</span><br><span class="line">env.TF_CPP_MIN_LOG_LEVEL : <span class="number">1</span></span><br><span class="line">graph_options.place_pruned_graph : <span class="literal">True</span></span><br><span class="line">gpu_options.allow_growth : <span class="literal">True</span></span><br></pre></td></tr></table></figure>
<p>在函数<code>_sanitize_tf_config</code>中，首先创建了名为<strong>cfg</strong>的字典:该字典中包含上个代码框中的默认<strong>key</strong>及其<strong>value</strong>，当该函数的输入变量<strong>config_dict</strong>不为空时则执行<code>cfg.update(config_dict)</code>将新的字典添加到<strong>cfg</strong>中，最后返回字典<strong>cfg</strong>。</p>
<p><strong>np_random_seed</strong>默认为<strong>None</strong> 。当<strong>tf_random_seed</strong>为<strong>‘auto’</strong>（默认状态）时，执行<code>tf_random_seed=np.random.randint(1 &lt;&lt; 31)</code>，即生成一个小于<strong>1&lt;&lt;31=2147483648</strong>的值并赋给<strong>tf_random_seed</strong>，若为其它非<strong>‘auto’</strong>及非<strong>None</strong>值，则将其作为种子输入到<code>tf.set_random_seed()</code>中。</p>
<p>接下来的代码 <code>key.split(&quot;.&quot;)</code>以”<strong>.</strong>“分割了字典中的<strong>key</strong>并找到名为”<strong>env</strong>“的项，后续操作等价于<code>os.environ[&#39;TF_CPP_MIN_LOG_LEVEL&#39;]=’1‘</code>。即，将<strong>tf</strong>的<strong>log</strong>输出级别设置为1。</p>
<p><code>create_session(cfg,force_as_default=True)</code>将创建的配置信息以字典变量方式传入函数<strong>create_session</strong>并强制设置当前会话为默认会话。</p>
<p><code>obj=getattr(obj,field)</code>获取了<strong>obj</strong>的<strong>graph_options</strong>和<strong>gpu_options</strong>属性并分别设置其中的<strong>place_pruned_graph</strong>和<strong>allow_growth</strong>为<strong>True</strong>.</p>
<h2 id="Gs-print-layers"><a href="#Gs-print-layers" class="headerlink" title="Gs.print_layers()"></a>Gs.print_layers()</h2><p>回到主函数中,<code>Gs.print_layers()</code>结果：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">G                               Params    OutputShape          WeightShape     </span><br><span class="line">---                             ---       ---                  ---             </span><br><span class="line">latents_in                      -         (?, 512)             -               </span><br><span class="line">labels_in                       -         (?, 0)               -               </span><br><span class="line">lod                             -         ()                   -               </span><br><span class="line">dlatent_avg                     -         (<span class="number">512</span>,)               -               </span><br><span class="line">G_mapping/latents_in            -         (?, 512)             -               </span><br><span class="line">G_mapping/labels_in             -         (?, 0)               -               </span><br><span class="line">G_mapping/PixelNorm             -         (?, 512)             -               </span><br><span class="line">G_mapping/Dense0                262656    (?, 512)             (512, 512)      </span><br><span class="line">G_mapping/Dense1                262656    (?, 512)             (512, 512)      </span><br><span class="line">G_mapping/Dense2                262656    (?, 512)             (512, 512)      </span><br><span class="line">G_mapping/Dense3                262656    (?, 512)             (512, 512)      </span><br><span class="line">G_mapping/Dense4                262656    (?, 512)             (512, 512)      </span><br><span class="line">G_mapping/Dense5                262656    (?, 512)             (512, 512)      </span><br><span class="line">G_mapping/Dense6                262656    (?, 512)             (512, 512)      </span><br><span class="line">G_mapping/Dense7                262656    (?, 512)             (512, 512)      </span><br><span class="line">G_mapping/Broadcast             -         (?, 18, 512)         -               </span><br><span class="line">G_mapping/dlatents_out          -         (?, 18, 512)         -               </span><br><span class="line">Truncation                      -         (?, 18, 512)         -               </span><br><span class="line">G_synthesis/dlatents_in         -         (?, 18, 512)         -               </span><br><span class="line">G_synthesis/4x4/Const           534528    (?, 512, 4, 4)       (512,)          </span><br><span class="line">G_synthesis/4x4/Conv            2885632   (?, 512, 4, 4)       (3, 3, 512, 512)</span><br><span class="line">G_synthesis/ToRGB_lod8          1539      (?, 3, 4, 4)         (1, 1, 512, 3)  </span><br><span class="line">G_synthesis/8x8/Conv0_up        2885632   (?, 512, 8, 8)       (3, 3, 512, 512)</span><br><span class="line">G_synthesis/8x8/Conv1           2885632   (?, 512, 8, 8)       (3, 3, 512, 512)</span><br><span class="line">G_synthesis/ToRGB_lod7          1539      (?, 3, 8, 8)         (1, 1, 512, 3)  </span><br><span class="line">G_synthesis/Upscale2D           -         (?, 3, 8, 8)         -               </span><br><span class="line">G_synthesis/Grow_lod7           -         (?, 3, 8, 8)         -               </span><br><span class="line">G_synthesis/16x16/Conv0_up      2885632   (?, 512, 16, 16)     (3, 3, 512, 512)</span><br><span class="line">G_synthesis/16x16/Conv1         2885632   (?, 512, 16, 16)     (3, 3, 512, 512)</span><br><span class="line">G_synthesis/ToRGB_lod6          1539      (?, 3, 16, 16)       (1, 1, 512, 3)  </span><br><span class="line">G_synthesis/Upscale2D_1         -         (?, 3, 16, 16)       -               </span><br><span class="line">G_synthesis/Grow_lod6           -         (?, 3, 16, 16)       -               </span><br><span class="line">G_synthesis/32x32/Conv0_up      2885632   (?, 512, 32, 32)     (3, 3, 512, 512)</span><br><span class="line">G_synthesis/32x32/Conv1         2885632   (?, 512, 32, 32)     (3, 3, 512, 512)</span><br><span class="line">G_synthesis/ToRGB_lod5          1539      (?, 3, 32, 32)       (1, 1, 512, 3)  </span><br><span class="line">G_synthesis/Upscale2D_2         -         (?, 3, 32, 32)       -               </span><br><span class="line">G_synthesis/Grow_lod5           -         (?, 3, 32, 32)       -               </span><br><span class="line">G_synthesis/64x64/Conv0_up      1442816   (?, 256, 64, 64)     (3, 3, 512, 256)</span><br><span class="line">G_synthesis/64x64/Conv1         852992    (?, 256, 64, 64)     (3, 3, 256, 256)</span><br><span class="line">G_synthesis/ToRGB_lod4          771       (?, 3, 64, 64)       (1, 1, 256, 3)  </span><br><span class="line">G_synthesis/Upscale2D_3         -         (?, 3, 64, 64)       -               </span><br><span class="line">G_synthesis/Grow_lod4           -         (?, 3, 64, 64)       -               </span><br><span class="line">G_synthesis/128x128/Conv0_up    426496    (?, 128, 128, 128)   (3, 3, 256, 128)</span><br><span class="line">G_synthesis/128x128/Conv1       279040    (?, 128, 128, 128)   (3, 3, 128, 128)</span><br><span class="line">G_synthesis/ToRGB_lod3          387       (?, 3, 128, 128)     (1, 1, 128, 3)  </span><br><span class="line">G_synthesis/Upscale2D_4         -         (?, 3, 128, 128)     -               </span><br><span class="line">G_synthesis/Grow_lod3           -         (?, 3, 128, 128)     -               </span><br><span class="line">G_synthesis/256x256/Conv0_up    139520    (?, 64, 256, 256)    (3, 3, 128, 64) </span><br><span class="line">G_synthesis/256x256/Conv1       102656    (?, 64, 256, 256)    (3, 3, 64, 64)  </span><br><span class="line">G_synthesis/ToRGB_lod2          195       (?, 3, 256, 256)     (1, 1, 64, 3)   </span><br><span class="line">G_synthesis/Upscale2D_5         -         (?, 3, 256, 256)     -               </span><br><span class="line">G_synthesis/Grow_lod2           -         (?, 3, 256, 256)     -               </span><br><span class="line">G_synthesis/512x512/Conv0_up    51328     (?, 32, 512, 512)    (3, 3, 64, 32)  </span><br><span class="line">G_synthesis/512x512/Conv1       42112     (?, 32, 512, 512)    (3, 3, 32, 32)  </span><br><span class="line">G_synthesis/ToRGB_lod1          99        (?, 3, 512, 512)     (1, 1, 32, 3)   </span><br><span class="line">G_synthesis/Upscale2D_6         -         (?, 3, 512, 512)     -               </span><br><span class="line">G_synthesis/Grow_lod1           -         (?, 3, 512, 512)     -               </span><br><span class="line">G_synthesis/1024x1024/Conv0_up  21056     (?, 16, 1024, 1024)  (3, 3, 32, 16)  </span><br><span class="line">G_synthesis/1024x1024/Conv1     18752     (?, 16, 1024, 1024)  (3, 3, 16, 16)  </span><br><span class="line">G_synthesis/ToRGB_lod0          51        (?, 3, 1024, 1024)   (1, 1, 16, 3)   </span><br><span class="line">G_synthesis/Upscale2D_7         -         (?, 3, 1024, 1024)   -               </span><br><span class="line">G_synthesis/Grow_lod0           -         (?, 3, 1024, 1024)   -               </span><br><span class="line">G_synthesis/images_out          -         (?, 3, 1024, 1024)   -               </span><br><span class="line">G_synthesis/lod                 -         ()                   -               </span><br><span class="line">G_synthesis/noise0              -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>)         -               </span><br><span class="line">G_synthesis/noise1              -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">4</span>, <span class="number">4</span>)         -               </span><br><span class="line">G_synthesis/noise2              -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>)         -               </span><br><span class="line">G_synthesis/noise3              -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">8</span>, <span class="number">8</span>)         -               </span><br><span class="line">G_synthesis/noise4              -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">16</span>)       -               </span><br><span class="line">G_synthesis/noise5              -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">16</span>)       -               </span><br><span class="line">G_synthesis/noise6              -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)       -               </span><br><span class="line">G_synthesis/noise7              -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">32</span>, <span class="number">32</span>)       -               </span><br><span class="line">G_synthesis/noise8              -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">64</span>, <span class="number">64</span>)       -               </span><br><span class="line">G_synthesis/noise9              -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">64</span>, <span class="number">64</span>)       -               </span><br><span class="line">G_synthesis/noise10             -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">128</span>, <span class="number">128</span>)     -               </span><br><span class="line">G_synthesis/noise11             -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">128</span>, <span class="number">128</span>)     -               </span><br><span class="line">G_synthesis/noise12             -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">256</span>, <span class="number">256</span>)     -               </span><br><span class="line">G_synthesis/noise13             -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">256</span>, <span class="number">256</span>)     -               </span><br><span class="line">G_synthesis/noise14             -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">512</span>, <span class="number">512</span>)     -               </span><br><span class="line">G_synthesis/noise15             -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">512</span>, <span class="number">512</span>)     -               </span><br><span class="line">G_synthesis/noise16             -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1024</span>, <span class="number">1024</span>)   -               </span><br><span class="line">G_synthesis/noise17             -         (<span class="number">1</span>, <span class="number">1</span>, <span class="number">1024</span>, <span class="number">1024</span>)   -               </span><br><span class="line">images_out                      -         (?, 3, 1024, 1024)   -               </span><br><span class="line">---                             ---       ---                  ---             </span><br><span class="line">Total                           <span class="number">26219627</span></span><br></pre></td></tr></table></figure>
<h2 id="np-random-RandomState"><a href="#np-random-RandomState" class="headerlink" title="np.random.RandomState"></a>np.random.RandomState</h2><p>代码<code>rnd = np.random.RandomState(seed)</code>基于<strong>Mesenne Twister</strong>算法生成伪随机数:</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">       rnd = np.random.RandomState(<span class="literal">None</span>)</span><br><span class="line">       print(rnd.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">[output]::</span><br><span class="line">[<span class="number">7</span> <span class="number">6</span> <span class="number">7</span> <span class="number">5</span> <span class="number">6</span>]</span><br><span class="line">[<span class="number">7</span> <span class="number">4</span> <span class="number">5</span> <span class="number">3</span> <span class="number">9</span>]</span><br><span class="line">[<span class="number">1</span> <span class="number">7</span> <span class="number">9</span> <span class="number">3</span> <span class="number">6</span>]</span><br><span class="line">[<span class="number">5</span> <span class="number">3</span> <span class="number">3</span> <span class="number">1</span> <span class="number">3</span>]</span><br><span class="line">[<span class="number">9</span> <span class="number">3</span> <span class="number">5</span> <span class="number">2</span> <span class="number">9</span>]</span><br><span class="line">&gt;&gt;&gt;<span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">       rnd = np.random.RandomState(<span class="number">1</span>)</span><br><span class="line">       print(rnd.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">[output]::</span><br><span class="line">[<span class="number">6</span> <span class="number">9</span> <span class="number">6</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">[<span class="number">6</span> <span class="number">9</span> <span class="number">6</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">[<span class="number">6</span> <span class="number">9</span> <span class="number">6</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">[<span class="number">6</span> <span class="number">9</span> <span class="number">6</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">[<span class="number">6</span> <span class="number">9</span> <span class="number">6</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">&gt;&gt;&gt;rnd = np.random.RandomState(<span class="number">1</span>)</span><br><span class="line">   <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">       print(rnd.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">5</span>))</span><br><span class="line">[output]::</span><br><span class="line">[<span class="number">6</span> <span class="number">9</span> <span class="number">6</span> <span class="number">1</span> <span class="number">1</span>]</span><br><span class="line">[<span class="number">2</span> <span class="number">8</span> <span class="number">7</span> <span class="number">3</span> <span class="number">5</span>]</span><br><span class="line">[<span class="number">6</span> <span class="number">3</span> <span class="number">5</span> <span class="number">3</span> <span class="number">5</span>]</span><br><span class="line">[<span class="number">8</span> <span class="number">8</span> <span class="number">2</span> <span class="number">8</span> <span class="number">1</span>]</span><br><span class="line">[<span class="number">7</span> <span class="number">8</span> <span class="number">7</span> <span class="number">2</span> <span class="number">1</span>]</span><br></pre></td></tr></table></figure>
<p>   <code>latents = rnd.randn(1, Gs.input_shape[1])</code>生成一个(1, 512)的随机向量。<br>   <code>fmt=dict(func=tflib.convert_images_to_uint8,nchw_to_nhwc=True)</code>将函数<code>tflib.convert_images_to_uint8</code>以及<strong>bool</strong>值<code>nchw_to_nhwc=True</code>打包成字典<strong>fmt</strong>。</p>
<h2 id="tflib-convert-images-to-uint8"><a href="#tflib-convert-images-to-uint8" class="headerlink" title="tflib.convert_images_to_uint8"></a>tflib.convert_images_to_uint8</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">"""将数据类型为float32的minibatch图像转换为uint8.以及调整数据格式.</span></span><br><span class="line"><span class="string">可以用来对Network.run()的输出做转换处理."""</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">convert_images_to_uint8</span><span class="params">(images, drange=[<span class="number">-1</span>,<span class="number">1</span>], nchw_to_nhwc=False, shrink=<span class="number">1</span>)</span>:</span></span><br><span class="line">    images = tf.cast(images, tf.float32)</span><br><span class="line">    <span class="keyword">if</span> shrink &gt; <span class="number">1</span>:</span><br><span class="line">        ksize = [<span class="number">1</span>, <span class="number">1</span>, shrink, shrink]</span><br><span class="line">        images = tf.nn.avg_pool(images, ksize=ksize, strides=ksize, padding=<span class="string">"VALID"</span>, data_format=<span class="string">"NCHW"</span>)</span><br><span class="line">    <span class="keyword">if</span> nchw_to_nhwc:</span><br><span class="line">        images = tf.transpose(images, [<span class="number">0</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">1</span>])</span><br><span class="line">    scale = <span class="number">255</span> / (drange[<span class="number">1</span>] - drange[<span class="number">0</span>]) <span class="comment"># scale = 127.5</span></span><br><span class="line">    images = images * scale + (<span class="number">0.5</span> - drange[<span class="number">0</span>] * scale)</span><br><span class="line">    <span class="keyword">return</span> tf.saturate_cast(images, tf.uint8)</span><br></pre></td></tr></table></figure>
<p> <strong>“NHWC”</strong>模式下，批次数据的排列顺序为[batch, height, width, channels]（TF的默认设置）<br> <strong>“NCHW”</strong>模式下，批次数据的排列顺序为[batch, channels, height, width]<br> <strong>NHWC</strong>和<strong>NCHW</strong>的解读可参照<a href="https://blog.csdn.net/weixin_41847115/article/details/83794551#commentBox" target="_blank" rel="noopener">深度学习(4):NCHW和NHWC</a>，后续个人将完善这部分的学习。</p>
<h2 id="Gs-run"><a href="#Gs-run" class="headerlink" title="Gs.run"></a>Gs.run</h2><p><code>images=Gs.run(latents,None,truncation_psi=0.7,randomize_noise=True,output_transform=fmt)</code>调用<strong>dnnlib/tflib/network.py</strong>中<strong>Network</strong>类的<strong>run</strong>。关于<strong>network.py</strong>的解读将放在其它文章中。</p>
<h2 id="os-makedirs-amp-os-path-join"><a href="#os-makedirs-amp-os-path-join" class="headerlink" title="os.makedirs &amp; os.path.join"></a>os.makedirs &amp; os.path.join</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">os.makedirs(config.result_dir, exist_ok=<span class="literal">True</span>)</span><br><span class="line">png_filename = os.path.join(config.result_dir,<span class="string">'example.png'</span>)</span><br></pre></td></tr></table></figure>
<p><code>os.makedirs(config.result_dir, exist_ok=True)</code>会根据<strong>config.result_dir</strong>提供的路径创建相应的文件夹，<strong>exist_ok=True</strong>用于当上述文件夹已经存在时屏蔽<code>OSError</code> 。<br><code>os.path.join(a)</code>函数可以将多个路径分量(父路径以及文件名)通过分隔符<code>&#39;/&#39;</code>连接在一起，本例中将<strong>config.result_dir</strong>与<strong>‘example.png’</strong>连接并赋值给<strong>png_filename</strong>，相当于<code>png_filename=&quot;%s/%s&quot;%(config.result_dir,&#39;example.png&#39;)</code>。</p>
<h2 id="PIL-Image-fromarray"><a href="#PIL-Image-fromarray" class="headerlink" title="PIL.Image.fromarray"></a>PIL.Image.fromarray</h2><p><code>PIL.Image.fromarray(images[0],&#39;RGB&#39;).save(png_filename)</code>将<strong>imgages[0]</strong>以<strong>RGB</strong>格式存储在文件<strong>png_filename</strong>中。</p>
]]></content>
      <categories>
        <category>GAN</category>
      </categories>
      <tags>
        <tag>styleGAN</tag>
      </tags>
  </entry>
</search>
